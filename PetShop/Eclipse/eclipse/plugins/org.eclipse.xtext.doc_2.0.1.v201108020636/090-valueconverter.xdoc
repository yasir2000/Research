section:valueconverter[Value Converter]

Value converters are registered to convert the parsed text into a data type instance and vice versa.
The primary hook is the codeRef[org.eclipse.xtext.conversion.IValueConverterService] 
and the concrete implementation can be registered via the runtime ref:guicemodules[Guice module].
Simply override the corresponding binding in your runtime module like shown in this example:

code[Java][@Override
public Class<? extends IValueConverterService> 
		bindIValueConverterService() {
  	return MySpecialValueConverterService.class;
}
]

The most simple way to register additional value converters is to make use of 
codeRef[org.eclipse.xtext.conversion.impl.AbstractDeclarativeValueConverterService], 
which allows to declaratively register an codeRef[org.eclipse.xtext.conversion.IValueConverter]
by means of an annotated method.

code[Java][
@ValueConverter(rule = "MyRuleName")
public IValueConverter<MyDataType> getMyRuleNameConverter() {
	return new MyValueConverterImplementation();
}
]

If you use the common terminals grammar code[Xtext][org.eclipse.xtext.common.Terminals] you should extend the 
codeRef[org.eclipse.xtext.common.services.DefaultTerminalConverters] and override or 
add value converters by adding the respective methods. In addition to the explicitly 
defined converters in the default implementation, a delegating converter is registered for each 
available codeRef[org.eclipse.emf.ecore.EDataType]. The delegating converter reuses the functionality of the corresponding EMF 
codeRef[org.eclipse.emf.ecore.EFactory].

Many languages introduce a concept for qualified names, i.e. names composed of namespaces separated by
a delimiter. Since this is such a common use case, Xtext provides an extensible converter implementation
for qualified names. The codeRef[org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter] handles
comments and white space gracefully and is capable to use the appropriate value converter for each segment of
a qualified name. This allows for individually quoted segments. The domainmodel example shows how to use it. 

The protocol of an codeRef[org.eclipse.xtext.conversion.IValueConverter] allows to throw a 
codeRef[org.eclipse.xtext.conversion.ValueConverterException] if something went wrong.
The exception is propagated as a syntax error by the parser or as a validation problem by the 
codeRef[org.eclipse.xtext.validation.impl.ConcreteSyntaxValidator] if the value cannot be converted 
to a valid string. The codeRef[org.eclipse.xtext.conversion.impl.AbstractLexerBasedConverter] is useful when 
implementing a custom value converter. If the converter needs to know about the rule that it currently 
works with, it may implement the interface codeRef[org.eclipse.xtext.conversion.IValueConverter$RuleSpecific]. 
The framework will set the rule such as the implementation may use it afterwards.