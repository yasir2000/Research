chapter:special_languages[Typical Language Configurations]


section:case_insensitive_languages[Case Insensitive Languages]

In some cases, e.g. if your e[SHIFT] key is broken, you might want to design a case insensitive language. Xtext offers separate ref:generator_fragment[generator fragments] for this purpose. 

For case insensitive keywords, open your MWE workflow and replace the ANTLR related fragments: 

code[MWE2][// The antlr parser generator fragment.
fragment = parser.antlr.XtextAntlrGeneratorFragment {
//  options = {
//		backtrack = true
//	}
}
...

// generates a more lightweight ANTLR parser and lexer tailored ...
fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
}
]

with

code[MWE2][// The antlr parser generator fragment.
fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
    options = {
        ignoreCase = true
    }
}
...

// generates a more lightweight ANTLR parser and lexer tailored ...
fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
    options = {
        ignoreCase = true
    }
}
]

For case insensitve element names, use the e[ignoreCase] option in your scope fragment, i.e.

code[MWE2][fragment = scoping.ImportNamespacesScopingFragment {
    ignoreCase = true
}
]

or if you are using ref:import_uri[importURI based global scopes]

code[MWE2][fragment = scoping.ImportURIScopingFragment {
    ignoreCase = true
}
]

section:java_independent_languages[Languages Independent of JDT]

The following section describes how you make your language independent of Eclipse's Java Development Toolkit (JDT).

In the e[UIModule] of your language you have to overwrite some bindings. First, remove the bindings to components 
with support for the e['classpath:'] URI protocol, i.e. 

code[Java][@Override
public Class<? extends IResourceForEditorInputFactory>
    bindIResourceForEditorInputFactory() {
        return ResourceForIEditorInputFactory.class;
}

@Override
public Class<? extends IResourceSetProvider> bindIResourceSetProvider() {
    return SimpleResourceSetProvider.class;
}
]

Second, configure the global scope provider to scan project root folders instead of the classpath of Java projects.   

code[Java][@Override
public com.google.inject.Provider
    <org.eclipse.xtext.resource.containers.IAllContainersState>
    provideIAllContainersState() {
    return org.eclipse.xtext.ui.shared.Access.getWorkspaceProjectsState();
}
]

The remaining steps show you how to adapt the  
ref:projectwizard[project wizard] for your language, if you have generated one.
The best way to do this is to create a new subclass of the generated 
e[IProjectCreator] in the e[src/] folder of the e[ui] project and 
apply the necessary changes there. First, remove the JDT project configuration 
by overriding e[configureProject] with an empty body. 

The next thing is to redefine the project natures and builders that should be
applied to you language projects.

In in this case just remove the JDT stuff in this way:

code[Java][protected String\[\] getProjectNatures() {
    return new String\[\] {
        "org.eclipse.pde.PluginNature",
        "org.eclipse.xtext.ui.shared.xtextNature"
    };
}

protected String\[\] getBuilders() {
    return new String\[\] {
        "org.eclipse.pde.ManifestBuilder", 
        "org.eclipse.pde.SchemaBuilder"
    };
}
]

After that you have to bind the new e[IProjectCreator]

code[Java][@Override
public Class<? extends IProjectCreator> bindIProjectCreator() {
    return JDTFreeMyDslProjectCreator.class;
}
]

That's all. Your language and its IDE should now no longer depend on JDT.

section-ref[expressions]