section:outline[Outline View]

Xtext provides an outline view to help you navigate your models. By default, it provides a hierarchical 
view on your model and allows you to sort tree elements alphabetically. Selecting an element in the 
outline will highlight the corresponding element in the text editor. Users can choose to synchronize 
the outline with the editor selection by clicking the e[Link with Editor] button.

img[images/sample_outline.png][ ][ ][ ]

In its default implementation, the outline view shows the containment hierarchy of your model. 
This should be sufficient in most cases. If you want to adjust the structure of the outline, i.e. 
by omitting a certain kind of node or by introducing additional nodes, you can customize 
the outline by implementing your own codeRef[org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider].

If your workflow defines the codeRef[org.eclipse.xtext.ui.generator.outline.OutlineTreeProviderFragment], 
Xtext generates a stub for your own codeRef[org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider]
that allows you to customize every aspect of the outline by inheriting the powerful customization methods
of codeRef[org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider]. The following sections 
show how to do fill this stub with life.


section2[Influencing the outline structure]

Each node the outline tree is an instance of codeRef[org.eclipse.xtext.ui.editor.outline.IOutlineNode].
The outline tree is always rooted in a codeRef[org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode].
This node is automatically created for you. Its children are the root nodes in the displayed view.

An codeRef[org.eclipse.xtext.ui.editor.outline.impl.EObjectNode] represents a model element. By default, Xtext
creates an codeRef[org.eclipse.xtext.ui.editor.outline.impl.EObjectNode] for each model element in the
node of its container. Nodes are created by calling the method code[Java][createNode(parentNode, modelElement)] which
delegates to code[Java][createEObjectNode(..)] if not specified differently.

To change the children of specific nodes, you have to implement the method code[Java][_createChildren(parentNode,
parentModelElement)] with the appropriate types. The following snippet shows you how to skip the root model element
of type code[Java][DomainModel] in the outline of our domain model example:

code[Java][
protected void _createChildren(DocumentRootNode parentNode, 
                               DomainModel domainModel) {
	for (AbstractElement element : domainModel.getElements()) {
		createNode(parentNode, element);
	}
}
]

You can choose not to create any node in the code[Java][_createChildren()] method. Because the outline nodes are 
calculated on demand, the UI will show you an expandable node that doesn't reveal any children if expanded.
This might be confuse your users a bit. To overcome this shortcoming, you have to implement the method 
code[Java][_isLeaf(modelElement)] with the appropriate argument type, e.g.

code[Java][
// feature nodes are leafs and not expandable
protected boolean _isLeaf(Feature feature) {
	return true;
}
]

Xtext provides a third type of node: codeRef[org.eclipse.xtext.ui.editor.outline.impl.EStructuralFeatureNode].
It is used to represent a feature of a model element rather than element itself. The following simplified
snippet from Xtend2 illustrates how to use it: 

code[Java][
protected void _createChildren(DocumentRootNode parentNode, 
                               XtendFile xtendFile) {
	// show a node for the attribute XtendFile.package
	createEStructuralFeatureNode(parentNode, 
		xtendFile, 
		Xtend2Package.Literals.XTEND_FILE__PACKAGE,
		getImageForPackage(), 
		xtendFile.getPackage(), 
		true);
	// show a container node for the list reference XtendFile.imports
	// the imports will be shown as individual child nodes automatically 
	createEStructuralFeatureNode(parentNode, 
		xtendFile, 
		Xtend2Package.Literals.XTEND_FILE__IMPORTS,
		getImageForImportContainer(), 
		"import declarations", 
		false);
	createEObjectNode(parentNode, xtendFile.getXtendClass());
}
]

Of course you can add further custom types of nodes. For consistency, make sure to inherit from 
codeRef[org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode]. To instantiate these, you have
to implement code[Java][_createNode(parentNode, semanticElement)] with the appropriate parameter types. 


section2[Styling the outline]

You can also customize the icons and texts for an outline node. By default, Xtext uses the ref:labelProvider[label
provider] of your language. If you want the labels to be specific to the outline, you can override the methods 
code[Java][_text(modelElement)] and code[Java][_image(modelElement)] in your 
codeRef[org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider]. 

Note that the method code[Java][_text(modelElement)] can return a codeRef[java.lang.String] or a 
codeRef[org.eclipse.jface.viewers.StyledString]. The codeRef[org.eclipse.xtext.ui.label.StylerFactory]
can be used to create codeRef[org.eclipse.jface.viewers.StyledString][StyledStrings], like in the following example: 

code[Java][
@Inject 
private StylerFactory stylerFactory;

public Object _text(Entity entity) {
	if(entity.isAbstract()) {
		return new StyledString(entity.getName(), 
			stylerFactory
				.createXtextStyleAdapterStyler(getTypeTextStyle())));
	else
		return entity.getName();
}

protected TextStyle getTypeTextStyle() {
	TextStyle textStyle = new TextStyle();
	textStyle.setColor(new RGB(149, 125, 71));
	textStyle.setStyle(SWT.ITALIC);
	return textStyle;
}
] 

To access images we recommend to use the codeRef[org.eclipse.xtext.ui.PluginImageHelper].

section2[Filtering actions]

Often, you want to allow users to filter the contents of the outline to make it easier to concentrate 
on the relevant aspects of the model. To add filtering capabilities to your outline, you need to add 
a filter action to your outline. Filter actions must extend 
codeRef[org.eclipse.xtext.ui.editor.outline.actions.AbstractFilterOutlineContribution]
to ensure that the action toggle state is handled correctly. Here is an example form our domain model
example:

code[Java][
public class FilterOperationsContribution 
		extends AbstractFilterOutlineContribution {

	public static final String PREFERENCE_KEY = 
		"ui.outline.filterOperations";

	@Inject
	private PluginImageHelper imageHelper;
	
	@Override
	protected boolean apply(IOutlineNode node) {
		return !(node instanceof EObjectNode)
				|| !((EObjectNode) node).getEClass()
					.equals(DomainmodelPackage.Literals.OPERATION);
	}

	@Override
	public String getPreferenceKey() {
		return PREFERENCE_KEY;
	}

	@Override
	protected void configureAction(Action action) {
		action.setText("Hide operations");
		action.setDescription("Hide operations");
		action.setToolTipText("Hide operations");
		action.setImageDescriptor(getImageDescriptor());
	}

	protected ImageDescriptor getImageDescriptor(String imagePath) {
		return ImageDescriptor.createFromImage(
			imageHelper.getImage("Operation.gif"));
	}

	
}
]

The contribution must be bound in the e[MyDslUiModule] like this

code[Java][
public void configureFilterOperationsContribution(Binder binder) {
	binder
		.bind(IOutlineContribution.class).annotatedWith(
			Names.named("FilterOperationsContribution"))
		.to(FilterOperationsContribution.class);
}
]

section2[Sorting actions]

Xtext already adds a sorting action to your outline. By default, nodes are sorted lexically by their
text. You can change this behavior by binding your own 
codeRef[org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter$IComparator]. 

A very common use case is to group the children by categories first, e.g. show the imports before the types
in a package declaration, and sort the categories separately. That is why the 
codeRef[org.eclipse.xtext.ui.editor.outline.actions.SortOutlineContribution$DefaultComparator] has a
method code[Java][getCategory(IOutlineNode)] that allows to specify such categories. The example shows how to
use such categories:

code[Java][
public class MydslOutlineNodeComparator extends DefaultComparator {
	@Override
	public int getCategory(IOutlineNode node) {
		if (node instanceof EObjectNode) 
			switch((EObjectNode) node).getEClass().getClassifierID())) {
			case MydslPackage.TYPE0:	
				return -10;
			case MydslPackage.TYPE1:	
				return -20;
			}
		return Integer.MIN_VALUE;
	}
}
]

As always, you have to declare a binding for your custom implementation in your e[MyDslUiModule]:

code[Java][
@Override
public Class<? extends IComparator> 
	bindOutlineFilterAndSorter$IComparator() {
		return MydslOutlineNodeComparator.class;
}
]

section2:quick_outline[Quick Outline]

Xtext also provides a quick outline: If you press CTRL-O in an Xtext editor, the outline of the model is shown 
in a popup window. The quick outline also supports drill-down search with wildcards. To enable the quick outline,
you have to put the codeRef[org.eclipse.xtext.ui.generator.outline.QuickOutlineFragment] 
into your workflow.