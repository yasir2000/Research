section:labelProvider[Label Provider]

There are various places in the UI in which model elements have to be presented to the user: In the 
ref:outline[outline view], in ref:hyperlinking[hyperlinks], in ref:contentAssist[content proposals], 
find dialogs etc. Xtext allows to customize each of these appearances by individual implementation of
the codeRef[org.eclipse.jface.viewers.ILabelProvider] interface. 

An codeRef[org.eclipse.jface.viewers.ILabelProvider] has two methods: code[Java][getText(Object)] returns
the text in an object's label, while code[Java][getImage(Object)] returns the icon. In addition, the 
Eclipse UI framework offers the codeRef[org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider$IStyledLabelProvider], 
which returns a codeRef[org.eclipse.jface.viewers.StyledString] (i.e. with custom fonts, colors etc.) in the 
code[Java][getStyledText(Object)] method.

Almost all label providers in the Xtext framework inherit from the base class 
codeRef[org.eclipse.xtext.ui.label.AbstractLabelProvider] which unifies both 
approaches. Subclasses can either return a styled string or a string in the code[Java][doGetText(Object)] method. 
The framework will automatically convert it to a styled text (with default styles) or to a plain text 
in the respective methods. 

Dealing with images can be cumbersome, too, as image handles tend to be scarce system resources. 
The codeRef[org.eclipse.xtext.ui.label.AbstractLabelProvider] helps you managing 
the images: In your implementation of code[Java][doGetImage(Object)] you can as well return an 
codeRef[org.eclipse.swt.graphics.Image], an codeRef[org.eclipse.jface.resource.ImageDescriptor] or a string, 
representing a path in the e[icons/] folder of the containing plug-in. This path is actually 
configurable by Google Guice. Have a look at the codeRef[org.eclipse.xtext.ui.PluginImageHelper] to learn about the 
customizing possibilities.

If you have the 
codeRef[org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment] in the 
list of generator fragments in the MWE2 workflow for your language, it will automatically create 
stubs and bindings for an ref:EObjectLabelProvider[code[{MyLang}EObjectLabelProvider]] and an 
ref:DescriptionLabelProvider[code[{MyLang}DescriptionLabelProvider]] which you can implement manually. 

section2:EObjectLabelProvider[Label Providers For EObjects]

The EObject label provider refers to actually loaded and thereby available model elements. 
By default, Xtext binds the codeRef[org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider] to all use cases,
but you can change the binding individually for the Outline, Content Assist or other places. For that purpose, 
there is a so called e[binding annotation] for each use case. For example, to use a custom 
e[MyContentAssistLabelProvider] to display elements in the content assist, you have to override 
code[Java][configureContentProposalLabelProvider(..)] in your language's UI module:

code[Java][
@Override
public void configureContentProposalLabelProvider(Binder binder) {
  binder.bind(ILabelProvider.class)
    .annotatedWith(ContentProposalLabelProvider.class)
    .to(MyContentAssistLabelProvider.class);
}
]

If your grammar uses an imported codeRef[org.eclipse.emf.ecore.EPackage], there may be an existing e[edit]-plug-in generated 
by EMF that also provides label providers for model elements. To use this as a fallback, your label 
provider should call the constructor with the 
delegate parameter and use dependency injection for its initialization, e.g.

code[Java][
public class MyLabelProvider {
	@Inject	
	public MyLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
}
]

section3:DefaultEObjectLabelProvider[DefaultEObjectLabelProvider]

The default implementation of the codeRef[org.eclipse.jface.viewers.ILabelProvider] interface utilizes 
the polymorphic dispatcher idiom to implement an external visitor as the requirements of the label provider 
are kind of a best match for this pattern. It boils down to the fact that the only thing you need to do 
is to implement a method that matches a specific signature. It either provides a image filename or the 
text to be used to represent your model element. Have a look at following example to get a more detailed 
idea about the codeRef[org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider].

code[Java][
public class SecretCompartmentsLabelProvider 
    extends DefaultLabelProvider {

  public String text(Event event) {
    return event.getName() + " (" + event.getCode() + ")";
  }
  
  public String image(Event event) {
    return "event.gif";
  }
  
  public String image(State state) {
    return "state.gif";
  }
}
]

What is especially nice about the default implementation is the actual reason for its class 
name: It provides very reasonable defaults. To compute the label for a certain model element, it will 
at first have a look for an codeRef[org.eclipse.emf.ecore.EAttribute] e[name] and try to use this one.
If it cannot find such a feature, it will try to use the first feature, that can be used best as a label. 
At worst it will return the class name of the model element, which is kind of unlikely to happen.

You can a also customize error handling by overriding the methods code[Java][handleTextError()] or 
code[Java][handleImageError()].


section2:DescriptionLabelProvider[Label Providers For Index Entries]

Xtext maintains an index of all model elements to allow quick searching and linking without loading 
the referenced resource (see the chapter on ref:index_based[index-based scopes] for details). The 
elements from this index also appear in some UI contexts, e.g. in the e[Find model elements] dialog or 
in the e[Find references] view. For reasons of scalability, the UI should not automatically load 
resources, so we need another implementation of a label provider that works with the elements from the 
index, i.e. codeRef[org.eclipse.xtext.resource.IResourceDescription], codeRef[org.eclipse.xtext.resource.IEObjectDescription], and 
codeRef[org.eclipse.xtext.resource.IReferenceDescription].

The default implementation of this service is the 
codeRef[org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider]. It employs the 
same polymorphic dispatch mechanism as the ref:DefaultEObjectLabelProvider[DefaultEObjectLabelProvider]. 
The default text of an codeRef[org.eclipse.xtext.resource.IEObjectDescription] is its indexed name. 
The image is resolved by dispatching to code[Java][image(EClass)] with the codeRef[org.eclipse.emf.ecore.EClass] of the described object. 
This is likely the only method you want to override. Instances of codeRef[org.eclipse.xtext.resource.IResourceDescription] 
will be represented with their path and the icon registered for your language's editor. 

To have a custom description label provider, make sure it is bound in your UI module:

code[Java][
public void configureResourceUIServiceLabelProvider(Binder binder) {
  binder.bind(ILabelProvider.class)
    .annotatedWith(ResourceServiceDescriptionLabelProvider.class)
    .to(MyCustomDefaultDescriptionLabelProvider.class);
}
]