chapter:migrating_from_1_0_x[Migrating from Xtext 1.0.x to 2.0]

Most of the tasks when migrating to Xtext 2.0 can be automated. Some changes will be necessary in 
the manually written code where you have to carefully verify that your implementation is still working 
with Xtext 2.0. A reliable test-suite helps a lot. 

The grammar language is fully backward compatible. You should not have to apply any changes in the 
primary artifact. However, we introduced some additional validation rules that mark inconsistencies in your 
grammar. If you get any warnings in the grammar editor, it should be straight forward to fix them.

e[Tip: You'll learn something about the new features if you compare a freshly created Xtext project based
on 1.0.x with a new Xtext project based on 2.0. Especially the new fragments in the workflow are a good 
indicator for useful new features.] 

section[Take the Shortcut]

If you haven't made too many customizations to the generated defaults and if you're not referencing many 
classes of your Xtext language from the outside, you might consider starting with a new Xtext project, 
copying your grammar and then manually restoring your changes step by step. If that does not work for you, 
go on reading!

section[Migrating Step By Step]

Before you start the migration to Xtext 2.0, you should make sure that no old plug-ins are in your target platform.

e[Tip: The following steps try to use the Eclipse compiler to spot any source-incompatible changes while 
fixing them with only a few well described user actions. Doing these steps in another order causes most 
likely a higher effort.]


section2[Update the Plug-in Dependencies and Import Statements]

You should update the version constraints of the plug-in dependencies in your manifest files from version 
e[1.0.x] to e[2.0] if you specified any concrete versions.
Also the constraint of e[org.antlr.runtime] must be updated from e[\[3.0.0,3.0.2)] to e[3.2.0].

The next step is to fix the import statements in your classes to match the refactored naming scheme in Xtext. 
This fixes most of the problems in the manually written code. 

section2[Introduction of the Qualified Name]

With Xtext 2.0 an object for dealing with qualified names has been introduced: codeRef[org.eclipse.xtext.naming.QualifiedName]. 
The qualified name is now split into segments which can be queried. The lower-case version of the qualified name is cached
so that the performance of case insensitive languages is improved.
The signature of the methods used by the codeRef[org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider] 
changed to code[Java][QualifiedName qualifiedName(Object)]. 

The codeRef[org.eclipse.xtext.naming.IQualifiedNameConverter] converts qualified names from/to their codeRef[java.lang.String] 
representation. This is also where you specify the separator and wildcard strings. If you already know the segments of a 
qualified name, you can also create it using code[Java][QualifiedName.create(String ...)]. 

codeRef[org.eclipse.xtext.naming.QualifiedName] is the new type of the e[name] properties in the codeRef[org.eclipse.xtext.resource.IEObjectDescription]. 
So if you have customized indexing, e.g. implemented your own codeRef[org.eclipse.xtext.resource.IResourceDescription$Manager],
you will have to create codeRef[org.eclipse.xtext.naming.QualifiedName][qualified names] instead of codeRef[java.lang.String][strings].
codeRef[org.eclipse.xtext.resource.IEObjectDescription][IEObjectDescriptions] are also used in other places such as ref:scoping[scoping], 
ref:linking[linking], ref:serialization[serialization], ref:contentAssist[content assist]...

Furthermore, the method codeRef[org.eclipse.xtext.naming.IQualifiedNameProvider][IQualifiedNameProvider.getQualifiedName(EObject)] has been renamed 
to code[Java][getFullyQualifiedName(EObject)].

section2[Changes in the index and in find references]

In Xtext 1.0.x the interfaces codeRef[org.eclipse.xtext.resource.IResourceDescriptions], 
codeRef[org.eclipse.xtext.resource.IResourceDescription] and codeRef[org.eclipse.core.resources.IContainer] have 
several methods to query them for contained elements. In Xtext 2.0 there is a common interface 
codeRef[org.eclipse.xtext.resource.ISelectable] for this use case which is extended by the interfaces mentioned 
above. For further details have a look at the interface codeRef[org.eclipse.xtext.resource.ISelectable].

The default indexing for Xtext resources as it is defined in codeRef[org.eclipse.xtext.resource.impl.DefaultResourceDescriptionManager]
has changed. Only cross-references pointing to elements outside the current resource are indexed. Furthermore,
the codeRef[org.eclipse.xtext.resource.impl.DefaultResourceDescriptionManager] can now be easier customized
with an codeRef[org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy]. 

For Ecore files only codeRef[org.eclipse.emf.ecore.EPackage][EPackages], codeRef[org.eclipse.emf.ecore.EClassifier][EClassifiers]
and codeRef[org.eclipse.emf.ecore.EStructuralFeature][EStructuralFeatures] are indexed, each with both, the e[nsURI] and
the e[name] of the containing codeRef[org.eclipse.emf.ecore.EPackage] in their qualified name.

There is a new interface to find references to Xtext elements: codeRef[org.eclipse.xtext.ui.editor.findrefs.IReferenceFinder].
It allows to distinguish searches in the local codeRef[org.eclipse.emf.ecore.resource.Resource] from
global index searches. Local searches will yield e[all] local cross references independent of the indexing
strategy.

section2[Rewritten Node Model]

To reduce memory consumption, the node model has been redesigned in Xtext 2.0. We no longer
use EMF, but a chained list of compressed nodes instead.  

The package e[org.eclipse.xtext.nodemodel] now contains the relevant interfaces to program against. The 
new interfaces follow the naming convention of other types in the framework. They are called 
codeRef[org.eclipse.xtext.nodemodel.INode], codeRef[org.eclipse.xtext.nodemodel.ICompositeNode] and 
codeRef[org.eclipse.xtext.nodemodel.ILeafNode].
 That way, most of the migration will be done by prefixing the old names with an e[I] 
and use the organize imports tool. Please make sure not 
to program against concrete or abstract classes.

If you used the node model a lot, you should have a closer look at the new APIs. The codeRef[org.eclipse.emf.ecore.EObject] 
API is no longer available on the nodes. Instead, you we offer a couple of codeRef[java.lang.Iterable][Iterables]
for traversing the tree. Where appropriate, helper methods of the former e[ParseTreeUtil] and e[NodeUtil]
have become members of the nodes, e.g. code[Java][NodeUtil.getAllContents(AbstractNode)] has become 
codeRef[org.eclipse.xtext.nodemodel.INode][INode.getAsTreeIterable()] The remaining methods have been converted 
and moved to the new codeRef[org.eclipse.xtext.nodemodel.util.NodeModelUtils].

section2[New Outline]

The outline view has been completely re-implemented. To use the new one remove the following fragments from
your workflow
 
code[MWE2][
fragment = outline.TransformerFragment{}
fragment = outline.OutlineNodeAdapterFactoryFragment{}
]
and add 
code[MWE2][
fragment = outline.OutlineTreeProviderFragment {}
]

After generating a new class named e[MyDslOutlineTreeProvider] is generated. The API changed completely.
For that reason you should take a closer look at the ref:outline[chapter on the outline]. 
The old classes named e[MyDslTransformer] and e[MyDslOutlineNodeAdapterFactory] have become obsolete
and should be removed after having migrated your code to the new API.

section2[AutoEditStrategy]

In Xtext 1.0.x your AutoEditStrategy extends the class e[DefaultAutoEditStrategy] which implements the
interface codeRef[org.eclipse.jface.text.IAutoEditStrategy]. In Xtext 2.0 the 
codeRef[org.eclipse.xtext.ui.editor.autoedit.DefaultAutoEditStrategyProvider] 
should be extended instead. The only thing you have to do is to change the superclass from e[DefaultAutoEditStrategy]
to codeRef[org.eclipse.xtext.ui.editor.autoedit.DefaultAutoEditStrategyProvider].
The interface codeRef[org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider$IEditStrategyAcceptor] changed from 
code[Java][accept(IAutoEditStrategy)] 
to code[Java][accept(IAutoEditStrategy, String)]. The last parameter represents the e[contentType] of the document. Constants
could be found in the codeRef[org.eclipse.jface.text.IDocument] and in the
codeRef[org.eclipse.xtext.ui.editor.model.TerminalsTokenTypeToPartitionMapper]. 

As a example the configure method could look like this one:
code[Java][
	@Override
	protected void configure(IEditStrategyAcceptor acceptor) {
		super.configure(acceptor);
		acceptor.accept(new YourAutoEditStrategy(),
						IDocument.DEFAULT_CONTENT_TYPE);
	}
]
The last thing you have to do is to change the binding of the e[IAutoEditStrategy] 
in the e[MyDslUIModule] from

code[Java][
public Class<? extends IAutoEditStrategy> bindIAutoEditStrategy()
] 
to 
code[Java][
public Class<? extends AbstractEditStrategyProvider> 
	bindAbstractEditStrategyProvider() { .. }
]

section2[Other Noteworthy API Changes]

The e[src] folders are generated once, so existing code will not be overwritten but has to be updated manually.

You will face a couple of compilation problems due to changes in the API. Here's a list of the most prominent 
changes. It is usually only necessary to change your code, if you face any compilation problems.
ul[
	item[In the interface codeRef[org.eclipse.xtext.scoping.IGlobalScopeProvider] the method code[Java][getScope(EObject,EReference)] 
		has been removed. Use code[Java][getScope(Resource, EReference, Predicate<IEObjectDescription>)] instead.
	]
	item[The interface e[IAntlrParser] has been removed. Use the codeRef[org.eclipse.xtext.parser.IParser] instead.]
	item[The methods code[Java][error(..)] and code[Java][warning(..)] in the 
		codeRef[org.eclipse.xtext.validation.AbstractDeclarativeValidator] used to accept 
		integer constants representing the codeRef[org.eclipse.emf.ecore.EStructuralFeature] which caused
		the issues. These integer parameters were replaced
		by the feature itself, e.g. from code[Java][error(String, Integer)] to code[Java][error(String, EStructuralFeature)]. 
		Use the generated codeRef[org.eclipse.emf.ecore.EPackage][EPackage.Literals] to access 
		the codeRef[org.eclipse.emf.ecore.EStructuralFeature][EStructuralFeatures].
	]
	item[The enum e[DiagnosticSeverity] has been renamed to codeRef[org.eclipse.xtext.diagnostics.Severity].]
	item[The class e[TextLocation] has been replaced by the interface codeRef[org.eclipse.xtext.util.ITextRegion]
		with an immutable implementation codeRef[org.eclipse.xtext.util.TextRegion].]
	item[In Xtext 1.0.x the class codeRef[org.eclipse.xtext.resource.EObjectAtOffsetHelper] provided several static
	    methods to resolve elements. In
		Xtext 2.0 these methods aren't static anymore. For that reason you could create an instance of this class or let 
		Guice do the job for you: 
		code[Java][
			@Inject private EObjectAtOffsetHelper eObjectAtOffsetHelper;
		]
	]
	item[The method codeRef[org.eclipse.xtext.resource.EObjectAtOffsetHelper][EObjectAtOffsetHelper.resolveElementAt(XtextResource, int, TextLocation)] 
		changed to code[Java][resolveElementAt(XtextResource, int)].
		You have to use the codeRef[org.eclipse.xtext.resource.ILocationInFileProvider] to compute the 
		codeRef[org.eclipse.xtext.util.TextRegion].]
	item[The codeRef[org.eclipse.xtext.resource.ILocationInFileProvider] now offers methods code[Java][getSignificantTextRegion()]
		and code[Java][getFullTextRegion()] to make the distinction between the name and the full region of an element.
		The old code[Java][getLocation()] method was removed.
	]
]

If you experience further problems, please refer to the link[http://www.eclipse.org/forums/index.php?t=thread&frm_id=27][newsgroup].

section[Now go for then new features]

After migrating, some of the new features in Xtext 2.0 will be automatically available. Others require further configuration.
We recommend exploring
ul[
	item[Xbase,]
	item[the new Xtend,]
	item[rename refactorings]
	item[the compare view,]
	item[rich hovers,]
	item[the Xtext syntax graph,]
	item[ref:antlr_errors[support for syntactic predicates],]
	item[the generated debug grammar,]
	item[ref:terminal_fragment[terminal fragments],]
	item[document partitions and auto edit]
	item[the redesigned ref:outline[outline view],]
	item[and the ref:quickfixes[quick fixes for the Xtext grammar language].]
]
For an overview over the new features consult our link[http://www.eclipse.org/Xtext/documentation/indigo/new_and_noteworthy.php][New and Noteworthy] online. 