chapter:grammarLanguage[The Grammar Language]

The link[http://git.eclipse.org/c/tmf/org.eclipse.xtext.git/tree/plugins/org.eclipse.xtext/src/org/eclipse/xtext/Xtext.xtext][grammar language] 
is the corner stone of Xtext. It is a domain-specific language, carefully designed for the description of textual languages.
The main idea is to describe the concrete syntax and how it is mapped to an in-memory representation
- the semantic model. This model will be produced by the parser on-the-fly when it consumes an input file.

section:statemachine[A First Example]

To get an idea of how it works we'll start by implementing a link[http://martinfowler.com/bliki/SyntacticNoise.html][simple example] 
introduced by Martin Fowler. It's mainly about describing state machines that are used as the (un)lock mechanism of secret compartments.
People who have secret compartments control their access in a very old-school way, e.g. by opening a draw first and 
turning on the light afterwards. Then the secret compartment, for instance a panel, opens up. One of those state machines 
could look like this:

code[FowlerExample][events
  doorClosed  D1CL
  drawOpened  D2OP
  lightOn     L1ON
  doorOpened  D1OP
  panelClosed PNCL
  resetting doorOpened D1OP
end
 
commands
  unlockPanel PNUL
  lockPanel   PNLK
  lockDoor    D1LK
  unlockDoor  D1UL
end
 
state idle
  actions {unlockDoor lockPanel}
  doorClosed => active
end
 
state active
  drawOpened => waitingForLight
  lightOn    => waitingForDraw
end
 
state waitingForLight
  lightOn => unlockedPanel
end
 
state waitingForDraw
  drawOpened => unlockedPanel
end
 
state unlockedPanel
  actions {unlockPanel lockDoor}
  panelClosed => idle
end
]

What we have are a bunch of declared events, commands, and states. Within states there are references to declared actions.
Actions should be executed when entering the state. Furthermore, there are transitions consisting of a reference to an event and 
a state.

The first thing that you have to do in order to implement this tiny state machine example with Xtext,
is to provide a grammar. It could look like this example:

code[Xtext][grammar org.xtext.example.SecretCompartments 
   with org.eclipse.xtext.common.Terminals

generate secrets "http://www.eclipse.org/secretcompartment"
 
Statemachine :
  'events'
     (events+=Event)+
  'end'
  ('resetEvents'
     (resetEvents+=\[Event\])+
  'end')?
  'commands'
     (commands+=Command)+
  'end'
  (states+=State)+;
 
Event :
  name=ID code=ID;
 
Command :
  name=ID code=ID;
 
State :
  'state' name=ID
     ('actions' '{' (actions+=\[Command\])+ '}')?
     (transitions+=Transition)*
  'end';
 
Transition :
  event=\[Event\] '=>' state=\[State\];
  ]

Martin Fowler uses this example throughout his book link[http://martinfowler.com/books.html#dsl][Domain
Specific Languages] to implement external and internal DSLs using
different technologies. Note, that none of his implementations is nearly as readable and concise as the description in
Xtext's grammar language above. That is of course because the grammar language is designed to do just that, i.e. it is 
specific to the domain of language descriptions.

section:syntax[The Syntax]

In the following the different concepts and syntactical constructs of the grammar language are explained. 

section2[Language Declaration]

Each Xtext grammar starts with a header that defines some properties of the grammar.

code[Xtext][grammar org.xtext.example.SecretCompartments
	 with org.eclipse.xtext.common.Terminals]

The first line declares the name of the language. Xtext leverages Java's classpath mechanism. This means that the name 
can be any valid Java qualifier. The file name needs to correspond to the language name and have the file 
extension code[.xtext]. This means that the name has to be e[SecretCompartments.xtext] and must be placed 
in a package e[org.xtext.example] on your project's classpath. In other words, your code[.xtext] file
has to reside in a Java source folder to be valid.

The second aspect that can be deduced from the first line of the grammar is its relationship to other
languages. An Xtext grammar can declare another existing grammar to be reused. The mechanism is called ref:grammarMixins[grammar mixin]).

section2:package_declarations[EPackage Declarations]

Xtext parsers create in-memory object graphs while consuming text. Such object-graphs are 
instances of EMF Ecore models. An Ecore model basically consists of an codeRef[org.eclipse.emf.ecore.EPackage] containing 
codeRef[org.eclipse.emf.ecore.EClass][EClasses], 
codeRef[org.eclipse.emf.ecore.EDataType][EDataTypes] and codeRef[org.eclipse.emf.ecore.EEnum][EEnums] 
(see the ref:model_metamodel[section on EMF] for more details) and describes
the structure of the instantiated objects. Xtext can infer Ecore models from a grammar 
(see ref:metamodelInference[Ecore model inference]) but it is also 
possible to import existing Ecore models. You can even mix both approaches and use multiple existing Ecore models and 
infer some others from a single grammar. This allows for easy reuse of existing abstractions while still
having the advantage of short turnarounds with derived Ecore models. 


section3[EPackage Generation]

The easiest way to get started is to let Xtext infer the Ecore model from your grammar. This is what is done in the 
secret compartment example. The code[Xtext][generate] declaration in the grammar advises the framework
to do so:

code[Xtext][generate secrets 'http://www.eclipse.org/secretcompartment']

That statement could actually be read as: generate an codeRef[org.eclipse.emf.ecore.EPackage] with the 
e[name] code[Xtext][secrets] and the e[nsURI] 
code[Xtext]["http://www.eclipse.org/secretcompartment"]. 
Actually these are the mandatory properties that are necessary to create an empty codeRef[org.eclipse.emf.ecore.EPackage].
Xtext will then add codeRef[org.eclipse.emf.ecore.EClass][EClasses] with 
codeRef[org.eclipse.emf.ecore.EAttribute][EAttributes] and codeRef[org.eclipse.emf.ecore.EReference][EReferences] for the 
different parser
rules in your grammar, as described in ref:metamodelInference[Ecore model inference]. 

section3[EPackage Import]

If you already have an existing codeRef[org.eclipse.emf.ecore.EPackage], you can import it using either a namespace URI or a resource URI. 
An link[http://www.ietf.org/rfc/rfc2396.txt][URI] (Uniform Resource Identifier) provides a simple and extensible 
means for identifying an abstract or physical resource. For all the nifty details about EMF URIs 
please refer to its codeRef[org.eclipse.emf.common.util.URI][documentation].

section4[Using Resource URIs to Import Existing EPackages]

In order to import an existing Ecore model, you'll have to have the *.ecore file describing the codeRef[org.eclipse.emf.ecore.EPackage] 
you want to 
use somewhere in your workspace. To refer to that file you make use of the e[platform:/resource] scheme.
Platform URIs are a special EMF concept which allow to reference elements in the workspace 
independent of the physical location of the workspace. It is an abstraction that uses the Eclipse workspace
concept as the logical root of each project. 

An import statement referring to an Ecore file by a e[platform:/resource/]-URI looks like this: 

code[Xtext][import 'platform:/resource/my.project/model/SecretCompartments.ecore']

If you want to mix generated and imported Ecore models you'll have to configure the generator fragment 
in your MWE file responsible for codeRef[org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment][generating the Ecore classes] 
with resource URIs that point to the ref:emf_codegen[generator models] of the referenced Ecore models.

The e[*.genmodel] provides all kind of generator configuration used by EMF's code generator. Xtext will automatically create
a generator model for derived codeRef[org.eclipse.emf.ecore.EPackage][EPackages], but if it references an existing, imported Ecore
model, the code generator needs to know how that code was generated in order to generate valid Java code. 

Example:

code[MWE2][fragment = org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment {
  referencedGenModels =
    "platform:/resource/my.project/model/SecretCompartments.genmodel"
}
]

section4[Using Classpath URIs to Import Existing EPackages]

We like to leverage Java's classpath mechanism, because is is well understood and can be configured easily
with Eclipse. Furthermore it allows us to package libraries as jars. If you want to reference an existing
e[*.ecore] file which is contained in a jar, you can make use of the 
classpath URI scheme we've introduced. For instance if you want to reference Java elements, you can use the JvmType Ecore model 
which is shipped as part of Xtext. 

Example:

code[Xtext][import 'classpath:/model/JvmTypes.ecore' as types]

As with platform resource URIs you'll also have to tell the generator where the corresponding e[*.genmodel] can be found:

code[MWE2][fragment = org.eclipse.xtext.generator.ecore.EcoreGeneratorFragment {
  referencedGenModels =
    "classpath:/model/JvmTypes.genmodel"
}
]

See the section on ref:jvmtypes[Referring Java Types] for a full explanation of this useful feature.

section4[Using Namespace URIs to Import Existing EPackages]

You can also use nsURI in order to import existing codeRef[org.eclipse.emf.ecore.EPackage]. Note that this is generally not
preferrable, because you'll have to have the corresponding EPackage installed in the workbench.
There's mainly just one exception, that is Ecore itself. So if you refer to Ecore it is best
to use its nsURI :

code[Xtext][import "http://www.eclipse.org/emf/2002/Ecore" as ecore]

section3[Ecore Model Aliases for EPackages]

If you want to use multiple codeRef[org.eclipse.emf.ecore.EPackage][EPackages] you need to specify aliases in the following way:

code[Xtext][generate secrets 'http://www.eclipse.org/secretcompartment'
import 'http://www.eclipse.org/anotherPackage' as another
]

When referring to a type somewhere in the grammar you need to qualify the reference using that 
alias (example code[Xtext][another::SomeType]). We'll see later where such type references occur.

It is also supported to put multiple codeRef[org.eclipse.emf.ecore.EPackage] imports into one alias. This is no problem as 
long as there are not any two codeRef[org.eclipse.emf.ecore.EClassifier][EClassifiers] with the same name. 
In that case none of them can be referenced. 
It is even possible to code[Xtext][import] multiple and code[Xtext][generate] one Ecore model and declare all of them with 
same alias. If you do so, for a reference to an codeRef[org.eclipse.emf.ecore.EClassifier] first the imported codeRef[org.eclipse.emf.ecore.EPackage][EPackages] are 
scanned before it is assumed that a type needs to be generated into the inferred package. 

Note, that using this feature is not recommended, because it might cause problems, which are hard to track down.
For instance, a reference to e[classA] would as well be linked to a newly created codeRef[org.eclipse.emf.ecore.EClass], because the 
corresponding type in e[http://www.eclipse.org/packContainingClassA] is spelled with a capital letter.

section2[Rules]

Basically parsing can be separated in the following phases. 

ol[
	item[Lexing]
	item[Parsing]
	item[Linking]
	item[Validation]
]

section3[Terminal Rules]

In the first stage called e[lexing], a sequence of characters (the text input) is transformed into a sequence of so 
called tokens. In this context, a token is sort of a strongly typed part or region of the input sequence. It consists of one 
or more characters and was matched by a particular terminal rule or keyword and therefore represents an atomic symbol.
Terminal rules are also referred to as e[token rules] or e[lexer rules]. There is an informal naming convention that 
names of terminal rules are all upper-case.

In the secret compartments example there are no explicitly defined terminal rules, since it only uses the e[ID] rule 
which is inherited from the grammar code[Xtext][org.eclipse.xtext.common.Terminals] (cf. ref:grammarMixins[Grammar Mixins]).
Therein the e[ID] rule is defined as follows:

code[Xtext][terminal ID : 
  ('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*; 
]

It says that a token e[ID] starts with an optional e['^'] character (caret), followed by a letter code[Xtext][('a'..'z'|'A'..'Z')] 
or underscore code[Xtext]['_'] followed by any number of letters, underscores and numbers code[Xtext][('0'..'9')]. 

The caret is used to escape an identifier if there are conflicts with existing keywords. It is removed 
by the e[ID] rule's ref:valueconverter[ValueConverter]. 

This is the simplified formal definition of terminal rules:

code[Xtext][TerminalRule :
  'terminal' name=ID ('returns' type=TypeRef)? ':' 
    alternatives=TerminalAlternatives ';'
;
]

Note, that e[the order of terminal rules is crucial for your grammar], as they may shadow each other. 
This is especially important for newly introduced rules in connection with imported rules from used grammars. 

It's almost in any case recommended to use data type rules instead. Let's assume you want to add a rule
 to allow fully qualified names in addition to simple IDs. Since a qualified name with only one segment
 looks like a plain ID, you should implement it as a ref:datatypeRules[data type rule], instead of adding 
 another terminal rule. The same rule of thumb applies to floating point literals, too.

section4[Return Types]

Each terminal rule returns an atomic value (an code[Ecore EDataType]). By default, it's assumed that
an instance of code[Xtext][ecore::EString]) should be returned.
However, if you want to provide a different type you can specify it. For instance, the rule e[INT] is defined as:

code[Xtext][terminal INT returns ecore::EInt : 
  ('0'..'9')+;
]

This means that the terminal rule e[INT] returns instances of code[Xtext][ecore::EInt]. It is possible to define any 
kind of data type here, which just needs to be an instance of code[Xtext][ecore::EDataType]. In order to tell the framework 
how to convert the parsed string to a value of the declared data type, you need to provide your own 
implementation of codeRef[org.eclipse.xtext.conversion.IValueConverterService] (cf. 
ref:valueconverter[value converters]). The value converter is also the service that allows to remove escape
sequences or semantically unnecessary character like quotes from string literals or the caret code[Xtext]['^'] from identifiers.
 Its implementation needs to be registered as a service (cf. ref:dependencyInjection[Service Framework]).

section3[Extended Backus-Naur Form Expressions]

Terminal rules are described using e[Extended Backus-Naur Form]-like (EBNF) expressions. The different expressions 
are described in the following. Each of these expressions allows to define a cardinality.
There are four different possible cardinalities:

ol[
item[exactly one (the default, no operator)]
item[one or none (operator e[?])]
item[any (zero or more, operator e[*])]
item[one or more (operator e[+])]
]

section4:Keywords[Keywords / Characters]

Keywords are a kind of terminal rule literals. 
The e[ID] rule in code[Xtext][org.eclipse.xtext.common.Terminals] for instance starts with a keyword:

code[Xtext][terminal ID : '^'? .... ;]

The question mark sets the cardinality to e[none or one] (i.e. optional) like explained above.

Note that a keyword can have any length and contain arbitrary characters. 

The following standard Java notations for special characters are allowed: e[\n], e[\r],
 e[\t], e[\b], e[\f] and the quoted unicode character notation, such as e[\u123].


section4[Character Ranges]

A character range can be declared using the code[Xtext][..] operator.

Example:

code[Xtext][terminal INT returns ecore::EInt: ('0'..'9')+;]

In this case an e[INT] is comprised of one or more (note the code[Xtext][+] operator) characters 
between (and including) code[Xtext]['0'] and code[Xtext]['9'].


section4[Wildcard]

If you want to allow any character you can simple write the wildcard operator code[Xtext][.] (dot):
Example:

code[Xtext][terminal FOO : 'f' . 'o';]

The rule above would allow expressions like e[foo], e[f0o] or even e[f_o].

section4[Until Token]

With the until token it is possible to state that everything should be consumed until a certain token occurs.
The multi-line comment is implemented this way:

code[Xtext][terminal ML_COMMENT	: '/*' -> '*/';]

This is the rule for Java-style comments that begin with code[Xtext][/*] and end with code[Xtext][*/].

section4[Negated Token]

All the tokens explained above can be inverted using a preceding exclamation mark:

code[Xtext][terminal BETWEEN_HASHES	: '#' (!'#')* '#';]

section4:rule_calls[Rule Calls]

Rules can refer to other rules. This is simply done by using the name of the rule to be called.
We refer to this as rule calls. Rule calls in terminal rules can only point to terminal rules.

Example:

code[Xtext][terminal DOUBLE : INT '.' INT;]

e[Note: It is generally not a good idea to implement floating point literals with terminal rules. You
should use data type rules instead for the above mentioned reasons.]

section4:Alternatives[Alternatives]

Alternatives allow to define multiple valid options in the input file. 
For instance, the white space rule uses alternatives like this:

code[Xtext][terminal WS : (' '|'\t'|'\r'|'\n')+;]

That is a WS can be made of one or more white space characters (including code[Xtext][' ', '\t', '\r', '\n']).

section4:Groups[Groups]

Finally, if you put tokens one after another, the whole sequence is referred to as a group.
Example:

code[Xtext][terminal ASCII : '0x' ('0'..'7') ('0'..'9'|'A'..'F');]

That is the 2-digit hexadecimal code of ASCII characters.

section3:terminal_fragment[Terminal Fragments]

Since terminal rules are used in an unscoped context, it's not easily possible to reuse parts of their
definition. Fragments solve this problem. They allow the same EBNF elements as terminal rules do but
may not be consumed by the lexer. Instead, they have to be used by other terminal rules. This allows
to extract repeating parts of a definition:

code[Xtext][
terminal fragment ESCAPED_CHAR : '\\' ('n'|'t'|'r'|'\\');
terminal STRING	: 
			'"' ( ESCAPED_CHAR | !('\\'|'"') )* '"' |
			"'" ( ESCAPED_CHAR | !('\\'|"'") )* "'"
;
]

section3:eof[EOF - End Of File]

The EOF (End Of File) token may be used to describe that the end of the input stream is a valid situation
at a certain point in a terminal rule. This allows to consume the complete remaining input of a file
starting with a special delimiter.

code[Xtext][terminal UNCLOSED_COMMENT : '/*' (!EOF)* EOF;]

section2:parser_rules[Parser Rules]

The parser is fed with a sequence of terminals and walks through the so called parser rules. Hence a parser rule - 
contrary to a terminal rule - does not produce a single atomic terminal token but a tree of non-terminal 
and terminal tokens. They lead to a so called ref:node_model[parse tree] (in Xtext it is also referred 
as node model). Furthermore, parser rules are handled as kind of a building plan for the creation of 
the codeRef[org.eclipse.emf.ecore.EObject][EObjects] that form the semantic model (the linked abstract syntax graph or AST). Due to this 
fact, parser rules are even called production or EObject rules. Different constructs like actions and 
assignments are used to derive types and initialize the semantic objects accordingly. 

section3[Extended Backus-Naur Form Expressions]

Not all the expressions that are available in terminal rules can be used in parser rules. Character 
ranges, wildcards, the until token and the negation as well as the EOF token are only available for terminal rules. 

The elements that are available in parser rules as well as in terminal rules are

ol[
item[ref:Groups[Groups], ]
item[ref:Alternatives[Alternatives], ]
item[ref:Keywords[Keywords] and ]
item[ref:rule_calls[Rule Calls].]
]

In addition to these elements, there are some expressions used to direct how the AST 
is constructed. They are listed and explained in the following.

section4:assignments[Assignments]

Assignments are used to assign the consumed information to a feature of the currently produced object. 
The type of the current object, its codeRef[org.eclipse.emf.ecore.EClass], is specified by the return type of the parser 
rule. If it is not explicitly stated it is implied that the type's name equals the rule's name. 
The type of the assigned feature is inferred from the right hand side of the assignment.

Example:

code[Xtext][State :
  'state' name=ID
    ('actions' '{' (actions+=\[Command\])+ '}')?
    (transitions+=Transition)*
  'end'
;
]

The syntactic declaration for states in the state machine example starts with a keyword code[FowlerExample][state] followed by an assignment:

code[Xtext][name=ID]

The left hand side refers to a feature e[name] of the current object (which has the codeRef[org.eclipse.emf.ecore.EClass] e[State] in this case). 
The right hand side can be a rule call, a keyword, a ref:cross_reference[cross-reference] or an alternative
comprised by the former. The type of the feature 
needs to be compatible with the type of the expression on the right. As e[ID] returns an e[EString] in this case, 
the feature e[name] needs to be of type codeRef[java.lang.String][EString] as well.

e[Assignment Operators]

There are three different assignment operators, each with different semantics.

ol[
item[The simple equal sign code[Xtext][=] is the straight forward assignment, and used for features which take only one element.]
item[The code[Xtext][+=] sign (the add operator) expects a multi-valued feature and adds the value on the right hand to that feature, which is a list feature.]
item[The code[Xtext][?=] sign (boolean assignment operator) expects a feature of type codeRef[java.lang.Boolean][EBoolean] and sets it 
to true if the right hand side was consumed independently from the concrete value of the right hand side.]
]

The used assignment operator does not influence the cardinality of the expected symbols on the right hand side. 

section4:cross_reference[Cross-References]

A unique feature of Xtext is the ability to declare crosslinks in the grammar. In traditional compiler 
construction the crosslinks are not established during parsing but in a later linking phase. This is the 
same in Xtext, but we allow to specify crosslink information in the grammar. This information is used by the linker.
The syntax for crosslinks is:

code[Xtext][CrossReference :
  '\[' type=TypeRef ('|' ^terminal=CrossReferenceableTerminal )? '\]'
;
]

For example, the transition is made up of two cross-references, pointing to an event and a state:

code[Xtext][Transition :
  event=\[Event\] '=>' state=\[State\]
;
]

It is important to understand that the text between the square brackets does not refer to another rule, but to an
codeRef[org.eclipse.emf.ecore.EClass] - which is a type and not a parser rule!
This is sometimes confusing, because one usually uses the same name for the rules and the returned types.
That is if we had named the type for events differently like in the following the cross-reference needs 
to be adapted as well:

code[Xtext][Transition :
  event=\[MyEvent\] '=>' state=\[State\]
;
 
Event returns MyEvent : ....;
]

Looking at the syntax definition for cross-references, there is an optional part starting with a vertical 
bar (pipe) followed by e[CrossReferenceableTerminal]. This is the part describing the concrete text, from 
which the crosslink later should be established. If the terminal is omitted, it is expected to be the rule
with the name e[ID] - if one can be found. The terminal is mandatory for languages that do not define a rule with the name e[ID].

Have a look at the ref:linking[linking section] in order to understand how linking is done.


section4:unordered_groups[Unordered Groups]

The elements of an unordered group can occur in any order but each element must appear once. Unordered 
groups are separated by code[Xtext][&]. The following rule code[Xtext][Modifier] allows to parse simplified
modifiers of the Java language:

code[Xtext][Modifier: 
	static?='static'? & final?='final'? & visibility=Visibility;

enum Visibility:
	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';
]

Therefore, the following sequences of tokens are valid:

code[Java][public static final
static protected 
final private static
public
]

However, since no unordered groups are used in the rule code[Xtext][Modifier], the parser refuses to accept
this input lines:

code[Java][static final static // ERROR: static appears twice
public static final private // ERROR: visibility appears twice
final // ERROR: visibility is missing
]

Note that if you want an element of an unordered group to appear once or not at all, 
you have to choose a cardinality of code[Xtext][?]. In the example, the visibility is mandatory, 
while code[Java][static] or code[Java][final] are optional. Elements with a cardinality of code[Xtext][*] or code[Xtext][+]
have to appear continuously without interruption, i.e.

code[Xtext][Rule:
	values+=INT* & name=ID;
]

will parse these lines

code[Java][0 8 15 x
x 0 8 15 
]

but not does not consume the following sequence without raising an error

code[Java][0 x 8 15 // wrong, as values may be interrupted by a name (ID)
]

section4[Simple Actions]

The object to be returned by a parser rule is usually created lazily on the first assignment. Its type is determined from the specified return type
of the rule which may have been inferred from the rule's name if no explicit return type is specified.

With Actions however, the creation of returned codeRef[org.eclipse.emf.ecore.EObject] can be made explicit. Xtext supports two kinds of Actions:

ol[
item[e[Simple] Actions, and]
item[e[Assigned] Actions.]
]

If you want to enforce the creation of an instance with specific type you can use simple actions.
In the following example e[TypeB] must be a subtype of e[TypeA]. An expression e[A ident] should create an instance of 
e[TypeA], whereas e[B ident] should instantiate e[TypeB].

If you don't use actions, you'll have to define an alternative and delegate rules to guide the parser
to the right types for the to-be-instantiated objects:

code[Xtext][MyRule returns TypeA :
  "A" name=ID |
  MyOtherRule
; 
 
MyOtherRule returns TypeB :
  "B" name = ID
;
]

Actions however allow to make this explicit. Thereby they can improve the readability of grammars. 

code[Xtext][MyRule returns TypeA :
  "A" name=ID |
  "B" {TypeB} name=ID
; 
]

Generally speaking, the instance is created as soon as the parser hits the first assignment. However, actions 
allow to explicitly instantiate any codeRef[org.eclipse.emf.ecore.EObject]. The notation e[{TypeB}] will create an instance of TypeB and assign 
it to the result of the parser rule. This allows to define parser rules without any assignment and to
create objects without the need to introduce unnecessary delegate rules.

e[Note: If a parser rule does not instantiate any object because it does not contain an Action and
no mandatory Assignment, you'll likely end up with unexpected situations for valid input files. Xtext
detects this situation and will raise a warning for the parser rules in question.] 

section4[Unassigned Rule Calls]

We previously explained, that the codeRef[org.eclipse.emf.ecore.EObject] to be returned is created lazily when the first assignment occurs or 
as soon as a simple action is evaluated. There is another to e[find] the codeRef[org.eclipse.emf.ecore.EObject] to be returned. The
concept is called e[Unassigned Rule Call].

Unassigned rule calls (the name suggests it) are rule calls to other parser rules, which are not used within an 
assignment. The return value of the called rule becomes the return value of the calling parser rule if
it is not assigned to a feature. 

With unassigned rule calls one can, for instance, create rules which just dispatch to other rules:

code[Xtext][AbstractToken :
  TokenA |
  TokenB |
  TokenC
;
]

As code[Xtext][AbstractToken] could possibly return an instance of e[TokenA], e[TokenB] or e[TokenC] its type must be a 
super type for all these types. Since the return value of the called rule becomes the result of the current
rule, it is possible to further change the state of the AST 
element by assigning additional features.

Example:

code[Xtext][AbstractToken :
  ( TokenA |
    TokenB |
    TokenC ) (cardinality=('?'|'+'|'*'))?
;
]

This way the e[cardinality] is optional (last question mark) and can be represented 
by a question mark, a plus, or an asterisk. It will be assigned to either an 
instance of type e[TokenA],  e[TokenB], or e[TokenC] which are all subtypes of 
e[AbstractToken]. The rule in this example will never create an instance of e[AbstractToken] directly
but always return the instance that has been created by the invoked e[TokenX] rule.

section4:grammarActions[Assigned Actions]

%% LL-parsing has some significant advantages over LR algorithms. The most important ones for Xtext are, that the generated code is much simpler to understand and debug and that it is easier to recover from errors. Especially ANTLR has a very nice generic error recovery mechanism. This allows to construct an AST even if there are syntactic errors in the text. You wouldn't get any of the nice IDE features as soon as there is one little error, if we hadn't error recovery.

Xtext leverages the powerful ANTLR parser which implements an code[LL(*)] algorithm. Even though code[LL]
parsers have many advantages with respect to readability, debuggability and error recovery, there are
also some drawbacks. The most important one is that it does not allow left recursive grammars.
For instance, the following rule is not allowed in LL-based grammars, because code[Xtext][Expression '+' Expression] is left recursive:

code[Xtext][Expression :
  Expression '+' Expression |
  '(' Expression ')' |
  INT
;
]

Instead one has to rewrite such things by "left-factoring" it:

code[Xtext][Expression :
  TerminalExpression ('+' TerminalExpression)?
;
 
TerminalExpression :
  '(' Expression ')' |
  INT
;
]

In practice this is always the same pattern and therefore not too difficult. 
However, by simply applying the Xtext AST construction features we've covered so far, a grammar ...

code[Xtext][Expression :
  {Operation} left=TerminalExpression (op='+' right=TerminalExpression)?
;
 
TerminalExpression returns Expression:
  '(' Expression ')' |
  {IntLiteral} value=INT
;
]

... would result in unwanted elements in the AST.
For instance the expression code[Java][(42)] would result in a tree like this:

code[MWE2][Operation {
  left=Operation {
    left=IntLiteral {
      value=42
    }
  }
}
]

Typically one would only want to have one instance of e[IntLiteral] instead.

This problem can be solved by using a combination of unassigned rule calls and assigned actions:

code[Xtext][Expression :
  TerminalExpression ({Operation.left=current} 
    op='+' right=Expression)?
;
 
TerminalExpression returns Expression:
  '(' Expression ')' |
  {IntLiteral} value=INT
;
]

In the example above code[Xtext][{Operation.left=current}] is a so called tree rewrite action, which creates a new instance of the stated 
codeRef[org.eclipse.emf.ecore.EClass]
e[Operation] and assigns the element currently to-be-returned (the code[Xtext][current] variable) to a feature of the newly created object.
The example uses the feature e[left] of the e[Operation] instance to store the previously returned e[Expression].
In Java these semantics could be expressed as:

code[Java][Operation temp = new Operation();
temp.setLeft(current);
current = temp;
]

section2:hidden_terminals[Hidden Terminal Symbols]

Because parser rules describe not a single token, but a sequence of patterns in the input, it is necessary to define
the interesting parts of the input. Xtext introduces the concept of hidden tokens to handle semantically unimportant
things like white spaces, comments, etc. in the input sequence gracefully. It is possible to define a set of terminal 
symbols, that are hidden from the parser rules and automatically skipped when they are recognized. Nevertheless, they 
are transparently woven into the node model, but not relevant for the semantic model. 

Hidden terminals may optionally appear between any other terminals in any cardinality. They can be described per rule 
or for the whole grammar. When ref:grammarMixins[reusing a single grammar] its definition of hidden tokens is reused,
too. The grammar code[Xtext][org.eclipse.xtext.common.Terminals] comes with a reasonable default and hides all comments and white
space from the parser rules.

If a rule defines hidden symbols, you can think of a kind of scope that is automatically introduced. Any rule that is
 called transitively by the declaring rule uses the same hidden terminals as the calling rule, unless it defines hidden tokens itself.

code[Xtext][Person hidden(WS, ML_COMMENT, SL_COMMENT): 
  name=Fullname age=INT ';'
;

Fullname: 
  (firstname=ID)? lastname=ID
;
]

The sample rule e[Person] defines multiline comments (code[Xtext][ML_COMMENT]), single-line comments (code[Xtext][SL_COMMENT]), and white
space (code[Xtext][WS]) to be allowed between
 the e[name] and the e[age]. Because the rule e[Fullname] does not introduce an own set of hidden terminals, it allows the same symbols to appear 
 between e[firstname] and e[lastname] as the calling rule e[Person]. Thus, the following input is perfectly valid for the given grammar snippet:

code[Java][John /* comment */ Smith // line comment
/* comment */
      42      ; // line comment
]

A list of all default terminals like code[Xtext][WS] can be found in section ref:grammarMixins[Grammar Mixins].

section2:datatypeRules[Data Type Rules]

Data type rules are parsing-phase rules, which create instances of codeRef[org.eclipse.emf.ecore.EDataType] instead of codeRef[org.eclipse.emf.ecore.EClass]. Thinking about it, one may discover 
that they are quite similar to terminal rules.
However, the nice thing about data type rules is that they are actually parser rules and are therefore 

ol[
item[context sensitive and ]
item[allow for use of hidden tokens.]
]

Assuming you want to define a rule to consume Java-like qualified names (e.g. "foo.bar.Baz")
you could write:

code[Xtext][QualifiedName :
  ID ('.' ID)*
;
]

In contrast to a terminal rule this is only valid in certain contexts, i.e. it won't conflict with the rule e[ID].
If you had defined it as a terminal rule, it would possibly hide the simple e[ID] rule.

In addition when the e[QualifiedName] been defined as a data type rule, it is allowed to use hidden 
tokens (e.g. code[Java][/* comment */] between the segment IDs and dots (e.g. code[Java][foo/* comment */. bar . Baz]).

Return types can be specified in the same way as for terminal rules:

code[Xtext][QualifiedName returns ecore::EString : 
  ID ('.' ID)*
;
]

Note that rules that do not call other parser rules and do neither contain any actions nor ref:assignments[assignments], are
 considered to be data type rules and the data type codeRef[java.lang.String][EString] is implied if none has been explicitly declared.

ref:valueconverter[Value converters] are used to transform the parsed string to the actually returned
data type value.

section2[Enum Rules]

Enum rules return enumeration literals from strings. They can be seen as a shortcut for data type rules with specific value converters.
The main advantage of enum rules is their simplicity, type safety and therefore nice validation. Furthermore it is possible
 to infer enums and their respective literals during the Ecore model transformation.

If you want to define a code[Xtext][ChangeKind] from link[http://download.eclipse.org/modeling/emf/emf/javadoc/2.6.0/org/eclipse/emf/ecore/change/package-summary.html][org.eclipse.emf.ecore.change/model/Change.ecore] with e[ADD], e[MOVE] and e[REMOVE] you could write:

code[Xtext][enum ChangeKind :
  ADD | MOVE | REMOVE
;
]

It is even possible to use alternative literals for your enums or reference an enum value twice:

code[Xtext][enum ChangeKind :
  ADD = 'add' | ADD = '+' | 
  MOVE = 'move' | MOVE = '->' | 
  REMOVE = 'remove' | REMOVE = '-'
;
]

Please note, that Ecore does not support unset values for enums. If you define a grammar like

code[Xtext][Element: "element" name=ID (value=SomeEnum)?;]

with the input of

code[Java][element Foo]

the resulting value of the element e[Foo] will hold the enum value with the internal representation of code[0] (zero). 
When generating the codeRef[org.eclipse.emf.ecore.EPackage] from your grammar this will be the first literal you define. As a workaround 
you could introduce a dedicated none-value or order the enums accordingly. Note that it is not possible to define 
an enum literal with an empty textual representation.

code[Xtext][enum Visibility: 
  package | private | protected | public
;
 ]

You can overcome this by modifying the infered Ecore model through a ref:customPostProcessing[model to model transformation].
However, instead of post processing, an explicitly imported metamodel is recommend.

section2:antlr_errors[Syntactic Predicates]

It's sometimes not easily possible to define an code[LL(*)] grammar for a given language that parses
all possible valid input files and still produces abstract syntax graphs that mimic the actual structure
of the files. There are even cases that cannot be described with an unambiguous grammar. There are solutions
that allow to deal with this problem:

ul[
	item[Enable Backtracking: Xtext allows to enable backtracking for the ANTLR parser generator. This
	is usually not recommended since it influences error message strategies at runtime and shadows actually
	existing problems in the grammar.]
	item[Syntactic Predicates: The grammar language enables users to guide the parser in case of ambiguities.
	This mechanism is achieved by syntactic predicates. Since they affect only a very small part of the
	grammar, syntactic predicates are the recommended approach to handle ANTLR error messages during
	the parser generation.]		
]

The classical example for ambiguous language parts is the e[Dangling Else Problem]. A conditional in
a programming language usually looks like this:

code[Java][
if (isTrue()) 
	doStuff(); 
else 
	dontDoStuff(); 
]

The problems becomes more obvious as soon as nested conditions are used:

code[Java][
if (isTrue())
	if (isTrueAsWell())	
		doStuff(); 
	else 
		dontDoStuff(); 
]

Where does the code[Java][else] branch belong to? This question can be answered by a quick look into the language
specification which tells that the code[Java][else] branch is part of the inner condition. However, the parser
generator cannot be convinced that easy. We have to guide it to this decision point by means of syntactic
predicates which are expressed by a leading code[=>] operator.

code[Xtext][Condition: 
	'if' condition=Expression 
		'then' then=Expression 
		(=>'else' else=Expression)?
]

The parser understands the predicate basically like this: If you are at this particular decision point
and you don't know what to do, look for the code[Java][else] keyword and if it's present. Don't try to
choose the other option that would start with an code[Java][else] keyword, too.

Well chosen predicates allow to solve most ambiguities and backtracking can often be disabled. 

section:metamodelInference[Ecore Model Inference]

The Ecore model (or meta model) of a textual language describes the structure of its abstract syntax trees (AST). 

Xtext uses Ecore's codeRef[org.eclipse.emf.ecore.EPackage][EPackages] to define Ecore models. Ecore models are declared to be either inferred (generated) 
from the grammar or imported. 
By using the code[Xtext][generate] directive, one tells Xtext to derive an codeRef[org.eclipse.emf.ecore.EPackage] from the grammar. 

section2[Type and Package Generation]

Xtext creates

ul[
item[an codeRef[org.eclipse.emf.ecore.EPackage] ul[
	item[for each generate-package declaration. After the directive code[Xtext][generate] a list of parameters follows. The e[name] of the codeRef[org.eclipse.emf.ecore.EPackage] 
	will be set to the first parameter, its e[nsURI] to the second parameter. An optional alias as the third parameter allows 
	to distinguish generated codeRef[org.eclipse.emf.ecore.EPackage][EPackages] later. Only one generated package declaration 
	per alias is allowed.]
]]
item[an codeRef[org.eclipse.emf.ecore.EClass] ul[
	item[for each return type of a parser rule. If a parser rule does not define a return type, an implicit one with the same 
	name as the rule itself is assumed. You can specify more than one rule that return the same type but only one codeRef[org.eclipse.emf.ecore.EClass] 
	will be generated.]
	item[for each type defined in an action or a cross-reference.]
]]
item[an codeRef[org.eclipse.emf.ecore.EEnum] ul[
	item[for each return type of an enum rule.]
]]
item[an codeRef[org.eclipse.emf.ecore.EDataType] ul[
	item[for each return type of a terminal rule or a data type rule.]
]]
]

All codeRef[org.eclipse.emf.ecore.EClass][EClasses], codeRef[org.eclipse.emf.ecore.EEnum][EEnums], and 
codeRef[org.eclipse.emf.ecore.EDataType][EDataTypes] are added to the codeRef[org.eclipse.emf.ecore.EPackage] referred to 
by the alias provided in the type reference they were created from.


section2[Feature and Type Hierarchy Generation]

While walking through the grammar, the algorithm keeps track of a set of the currently possible return types to add features to. 
ul[
item[Entering a parser rule the set contains only the return type of the rule. ]
item[Entering an element of an alternative the set is reset to the same state it was in when entering the first option of 
the alternative. ]
item[Leaving an alternative the set contains the union of all types at the end of each of its paths.]
item[After an optional element, the set is reset to the same state it was before entering it. ]
item[After a mandatory (non-optional) rule call or mandatory action the set contains only the return type of the called 
rule or action.]
item[An optional rule call does not modify the set.]
item[A rule call is optional, if its cardinality is code[?] or code[*].]
]

While iterating the parser rules Xtext creates
ul[
item[an codeRef[org.eclipse.emf.ecore.EAttribute] in each current return type ul[
	item[of type codeRef[java.lang.Boolean][EBoolean] for each feature assignment using the code[?=] operator. 
	No further codeRef[org.eclipse.emf.ecore.EReference][EReferences] or codeRef[org.eclipse.emf.ecore.EAttribute][EAttributes] will be generated from this assignment.]
	item[for each assignment with the code[=] or code[+=] operator calling a terminal rule. Its type will be the return type of the called rule.]
]]
item[an codeRef[org.eclipse.emf.ecore.EReference] in each current return type ul[
	item[for each assignment with the code[=] or code[+=] operator in a parser rule calling a parser rule. 
	The codeRef[org.eclipse.emf.ecore.EReference][EReference's] type will be the return type of the called parser rule.]
	item[for each assigned action. The reference's type will be set to the return type of the current calling rule. ]
]]
]

Each codeRef[org.eclipse.emf.ecore.EAttribute] or codeRef[org.eclipse.emf.ecore.EReference] takes its name from the assignment 
or action that caused it. Multiplicities will be e[0..1] for assignments with the code[=] operator and code[0..*] for assignments 
with the code[+=] operator. 

Furthermore, each type that is added to the currently possible return types automatically extends the current return type 
of the parser rule. You can specify additional common super types by means of "artificial" parser rules, that are never called, e.g.

code[Xtext][CommonSuperType:
  SubTypeA | SubTypeB | SubTypeC;
]

section2[Enum Literal Generation]

For each alternative defined in an enum rule, the transformer creates an enum literal, as long as no other literal with the same 
name can be found. The e[literal] property of the generated enum literal is set to the right hand side of the declaration. If 
it is omitted, an enum literal with equal e[name] and e[literal] attributes is inferred.

code[Xtext][enum MyGeneratedEnum:
  NAME = 'literal' | EQUAL_NAME_AND_LITERAL;
]

section2[Feature Normalization]

In the next step the generator examines all generated codeRef[org.eclipse.emf.ecore.EClass][EClasses] and lifts up similar features to super types
 if there is more than one subtype and the feature is defined in every subtypes. This does even work for multiple super types.


section2:customPostProcessing[Customized Post Processing]

As a last step, the generator invokes the post processor for every generated Ecore model. The post processor expects an 
Xtend1 file with name e[MyDslPostProcessor.ext] (if the name of the grammar file is e[MyDsl.xtext]) in the same 
folder as the grammar file. Further, for a successful invocation, the Xtend file must declare an extension 
with signature code[Xtend][process(xtext::GeneratedMetamodel)]. E.g.

code[Xtend][process(xtext::GeneratedMetamodel this) :
  process(ePackage)
;
 
process(ecore::EPackage this) :
  ... do something
;
]

The invoked extension can then augment the generated Ecore model in place. Some typical use cases are to:
ul[
item[set default values for attributes,]
item[add container references as opposites of existing containment references, or]
item[add operations with implementation using a body annotation.]
]

Great care must be taken to not modify the Ecore model in a way preventing the Xtext parser from working correctly
 (e.g. removing or renaming model elements).

e[Note: If you face the situation where you think that post processing may help, you should strongly
consider to use imported packages instead of generated packages.]

section2[Error Conditions]

The following conditions cause an error
ul[
item[An codeRef[org.eclipse.emf.ecore.EAttribute] or codeRef[org.eclipse.emf.ecore.EReference] has two different types or different cardinality.]
item[There is an codeRef[org.eclipse.emf.ecore.EAttribute] and an codeRef[org.eclipse.emf.ecore.EReference] with the same name in the same codeRef[org.eclipse.emf.ecore.EClass].]
item[There is a cycle in the type hierarchy.]
item[An new codeRef[org.eclipse.emf.ecore.EAttribute], codeRef[org.eclipse.emf.ecore.EReference] or super type is added to an imported type.]
item[An codeRef[org.eclipse.emf.ecore.EClass] is added to an imported codeRef[org.eclipse.emf.ecore.EPackage].]
item[An undeclared alias is used. ]
item[An imported Ecore model cannot be loaded.]
]


section:grammarMixins[Grammar Mixins]

Xtext supports the reuse of existing grammars. Grammars that are created via the Xtext wizard use 
code[Xtext][org.eclipse.xtext.common.Terminals]
by default which introduces a common set of terminal rules and defines reasonable defaults for hidden terminals.

code[Xtext][grammar org.xtext.example.SecretCompartments 
   with org.eclipse.xtext.common.Terminals

generate secrets "http://www.eclipse.org/secretcompartment"
 
Statemachine: ..
]

Mixing another grammar into a language makes the rules defined in that grammar referable. It is also possible to overwrite rules from the used grammar. 

Example :

code[Xtext][grammar my.SuperGrammar
...
RuleA : "a" stuff=RuleB;
RuleB : "{" name=ID "}";

grammar my.SubGrammar with my.SuperGrammar

Model : (ruleAs+=RuleA)*;

// overrides my.SuperGrammar.RuleB
RuleB : '\[' name=ID '\]';
]

e[Note that declared terminal rules always get a higher priority then imported terminal rules.]


section[Common Terminals]

Xtext ships with a default set of predefined, reasonable and often required terminal rules. The grammar
for these common terminal rules is defined as follows:

code[Xtext][ grammar org.eclipse.xtext.common.Terminals 
  hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

terminal ID : 
  '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: 
  ('0'..'9')+;
terminal STRING	: 
  '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
  "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
terminal ML_COMMENT	: 
  '/*' -> '*/';
terminal SL_COMMENT : 
  '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS	: 
  (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: 
  .;
]

