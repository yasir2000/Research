chapter:getting_started[Getting Started]

In this mini-tutorial we will implement a small domain-specific language and a 
corresponding Eclipse IDE integration with Xtext. Later, we will create a code generator 
that is capable of reading the models you create with the DSL editor and process them, i.e. 
generate some Java code from it.


section:getting_started_xtext[Creating a DSL]

link[http://www.eclipse.org/Xtext/download/][Download and install the latest version of Xtext] and 
set up a fresh workspace. We want to develop a small language used to define domain models.
It is a stripped-down version of our e[Domain-Model Example] which is shipped with Xtext 
and can be materialized into your workspace using the example wizard. The following sample 
of a domain model should give you an idea about the language.

code[DomainExample][datatype String
datatype Bool

entity Session {
  title: String
  isTutorial : Bool
}

entity Conference {
  name : String
  attendees : Person*
  speakers : Speaker*
}

entity Person {
  name : String
}

entity Speaker extends Person {
  sessions : Session*
}
]

section2[Create an Xtext Project]

In order to get started we first need to create some Eclipse projects. Use the Xtext wizard to do so:

  e[File -> New -> Project...  -> Xtext -> Xtext project]

Choose a meaningful project name, language name and file extension, e.g.

table[
tr[td[e[Main project name:]]td[org.eclipse.xtext.example.domainmodel]]
tr[td[e[Language name:]]td[org.eclipse.xtext.example.Domainmodel]]
tr[td[e[DSL-File extension:]]td[dmodel]]
]

Keep "Create generator project" checked, as we will also create a code generator in a second step.
If you want to materialize the full blown Domainmodel example that ships with Xtext, it is
strongly recommend to use another language name and file extension for this tutorial.

Click on e[Finish] to create the projects. 

img[images/getting-started-wizard.png][ ][ ][ ]


section2[Project Layout]

In the Package Explorer you can see three new projects. In 
e[org.eclipse.xtext.example.domainmodel] the grammar is defined and all runtime 
aspects, such as linking, scoping and validation are developed. The IDE-aspects 
such as the editor, any views, and incremental project builder go into 
e[org.eclipse.xtext.example.domainmodel.ui]. Both projects consist of generated 
classes derived from the grammar and manual code such as the grammar itself and 
further classes to differentiate and adapt from the default behavior. Although
Xtext makes use of code generation, most of the code is actually written as 
libraries, which are referenced by the means of OSGi using the Manifest.MF. 

img[images/getting-started-project-layout.png][ ][ ][ ]


It is good to be clear and unambiguous whether the code is generated or is to 
be manipulated by the developer. Thus, the generated code should be held 
separately from the manually written code. We follow this pattern by having a 
folder e[src/] and a folder e[src-gen/] in each project. Keep in mind not to 
make changes in the e[src-gen/] folder. They will be overwritten by the generator 
without any further warning.

A third project, e[org.eclipse.xtext.example.domainmodel.generator] will later 
contain an Xpand code generator that leverages the model created with the DSL 
editor. This is fully optional and it is also optional to use Xpand. In fact 
you can use any programming language running on the JVM to implement a code 
generator for your Xtext models. Also it is of course perfectly ok, to have no 
code generator at all but use the models dynamically at runtime. We call these 
kind of model processors e[interpreters].


section2[Build Your Own Grammar]

e[Please note]: If you encounter strange errors while copying and pasting
a snippet from this document to your Eclipse editor, your documentation
viewer most likely has inserted characters different from {space} into your 
clipboard. Reenter the "white space" or type the text by hand to be sure everything
works fine. 

The wizard will automatically open the example grammar file 
e[Domainmodel.xtext] from the first project in the editor. A grammar has two 
purposes: First, it is used to describe the concrete syntax of your language. 
Second, it contains information about how the parser shall create a model during 
parsing.

The first line of the grammar is the grammar declaration:

code[Xtext][grammar org.eclipse.xtext.example.Domainmodel 
  with org.eclipse.xtext.common.Terminals
]

In Xtext each grammar has a unique name, which like public Java classes 
needs to reflect the location of the file within the Java classpath. In our 
case the grammar file is located in 
e[/org/eclipse/xtext/example/Domainmodel.xtext] therefore the name of the 
grammar is code[Xtext][org.eclipse.xtext.example.Domainmodel]. The second part of that 
statement code[Xtext][with org.eclipse.xtext.common.Terminals] states, that this grammar 
reuses and overrides rules from the specified grammar. The 
e[org.eclipse.xtext.common.Terminals] is a library grammar shipped with Xtext 
and predefines the most common terminal rules, such as e[ID], e[STRING] and e[INT]. 
It also introduces single-line and multi-line comments as well as rules for 
white space, which may occur everywhere by default. You can open that grammar in the 
editor to have a look at these rules. It turns out that these set of rules are often 
the same and often used, so that most Xtext languages extend this grammar. 
However, it is just a library, so you won't use it if it doesn't fit your needs. 
Also you can use the grammar inheritance mechanism for your own grammar libraries, 
of course.


The next statement declares an EMF Ecore package, aka codeRef[org.eclipse.emf.ecore.EPackage], to be derived from the grammar:

code[Xtext][generate domainmodel "http://www.eclipse.org/xtext/example/Domainmodel"
]

Ecore e[EPackages] are effectively a set of classes (in EMF they are called 
e[EClass]) which are used to represent the in-memory-model of a text file. Instead
of e[model] we also sometimes refer to it as e[semantic model] or e[Abstract Syntax 
Tree (AST)]. Note, that in the case of Xtext it's actually a graph rather than a 
tree, since it also contains crosslinks. But as the term AST is so commonly 
used and well known we are ignoring this minor detail. 


In order to tell the parser which e[EClasses] to use when creating the AST, we 
need to make them available by either importing existing Ecore packages or like 
in our example let Xtext derive a package from the grammar. An e[EPackage] has a 
mandatory name and namespace URI (short: e[nsURI]), so we have to declare these two values 
in that statement. 

That's all for the prelude, now we have to define the parser rules which 
effectively define a bi-directional mapping from text to a constructed AST. 
It is bi-directional because Xtext not only derives a parser from the grammar but also 
a serializer. Anyway, we will mostly talk about parsing in this chapter.

Ignore and delete the parser rules generated by the wizard and start by 
declaring an entry rule for our language. The entry rule for the parser will be 
called e[DomainModel]. Xtext is fine with any name, it just picks the first rule 
in a grammar and interprets it as the entry rule.

As a e[DomainModel] consists of one or more e[Entity] entries, this rule delegates 
to another rule named e[Entity], which will be defined later on. As we can have an 
arbitrary number of entities within a model, the cardinality is e['*']. There are 
four different cardinalities available.

table[
tr[td[(no operator)]td[exactly one]]
tr[td[e[?]]td[zero or one]]
tr[td[e[*]]td[zero or more]]
tr[td[e[+]]td[one or more]]
]

Each rule ends with a semicolon. So our first rule reads for now as

code[Xtext][DomainModel :
  Entity*; 
]

An Xtext grammar does not only describe rules for the parser but also the 
structure of the resulting AST. Usually, each parser rule will create a new object 
in that tree. The type of that element can be specified after the rule name using 
the keyword e[returns]. If the type's name is the same as the rule's name, it can 
be omitted as in our case. Which effectively means that

code[Xtext][DomainModel returns DomainModel: ...
]

is the same as

code[Xtext][DomainModel : ...
]

In order to connect the different objects together, we have to assign the 
elements returned by called rules to some feature of the current rule's object. 
This is done by using so called assignments. 

code[Xtext][DomainModel :
  (elements+=Entity)*;
]

The assignment with the e['+='] operator adds every object returned by the 
e[Entity] rule to the e[elements] referenced of the AST type e[Model]. If you use e['+='] 
as opposed to e['='] the feature needs to be a list - the upperBound has to be -1. In addition to the 
two mentioned assignment operators there is a third one e['?='] which is called boolean 
assignment and which sets a certain feature to true, if the part on the right hand 
side was parsed successfully. Here's the list of available assignment operators:

table[
tr[td[ ]td[e[feature=...]]td[corresponds to code[Java][setFeature(...)]]]
tr[td[ ]td[e[list+=...]]td[corresponds to code[Java][getList().add(...)]]]
tr[td[ ]td[e[condition?=...]]td[corresponds to code[Java][setCondition(true)]]]
]

The next rule on our list is the rule e[Entity]. Looking at our target syntax, 
each entity begins with the keyword e['entity'] followed by the entity's name and an 
opening curly brace (we will handle the e[extends] clause in a second step). Then, 
an entity defines a number of features and ends with a closing curly brace. The 
rule looks like this:

code[Xtext][Entity :
  'entity' name=ID '{'
    (features+=Feature)*
  '}';
  ]

Keywords are simply declared as string literals within the rules. The name 
uses the e[ID] rule from the mixed-in grammar e[org.eclipse.xtext.common.Terminals]. 
The e[ID] rule is a so called terminal rule which always returns simple data types, 
such as e[String], e[Date], or e[Integer]. Actually any Java class can be a simple 
EMF e[EDataType]. The e[ID] rule recognizes alphanumeric words similar to identifiers 
in Java and returns the value as a e[String]. You can navigate to its declaration 
using e[F3]. As mentioned before the assignment operator e['='] denotes a single
valued feature.

We want to allow inheritance for entities and therefore now add an optional 
e[extends] part.

code[Xtext][Entity :
  'entity' name=ID ('extends' superType=\[Entity\])? '{'
    (features+=Feature)*
  '}';
]

The question mark marks an element or as in this case an entire group of elements as optional.
The other new thing is the right hand side of of the assignment e[superType=\[Entity\]].
This is a cross-reference literal and states, that a cross-reference to an elsewhere 
declared e[Entity] should be established. So in this case e[Entity] does not point to 
the corresponding rule but to the e[EClass]. As both are named equally this might 
cause a little confusion at first. The full syntax for a cross-reference is 
e[\[TypeName|RuleCall\]] where e[RuleCall] defaults to e[ID]. This means that 
e[('extends' superType=\[Entity|ID\])?] would work equally well. The parser only parses 
the name of the cross-referenced element using the e[ID] rule and stores it 
internally. Later on the linker establishes the cross-reference using the name, the 
defined cross-reference's type (e[Entity]in this case) and the defined scoping rules. 
Scoping is not covered in this tutorial since the domain model DSL works with 
the default scoping semantics. By default a namespace-based scoping is applied, which 
means that all entities living in the same namespace are possible candidates for a 
cross-reference. We talk a bit about this later on in this chapter when we introduce 
namespaces.

In our introductory example model we had not only defined entities but also two 
data types. So the e[DomainModel] rule needs to be able to parse data types as well. 
As both entities and data types will be referenced from the yet to be defined e[Feature] 
rule, we should introduce a common super type for them.

code[Xtext][DomainModel :
  (elements+=Type)*;

Type:
  DataType | Entity;
  
DataType:
  'datatype' name=ID;
 ]

A e[DomainModel] now consists of types where a e[Type] can either be a e[DataType] or 
an e[Entity]. Our rule e[Type] will just delegate to either of them, using the e['|'] 
alternatives operator. Now that we have a common super type for e[Entity] and e[DataType] 
we are able to refer to both types of elements with a single cross-reference.

Next up we need to define the syntax of e[Feature], which shouldn't be surprising to 
you, as we do not use any new concepts here.

code[Xtext][Feature:
  name=ID ':' type=TypeRef;
]

In many target platforms there is a difference between the notion of a simple 
attribute and a reference. In relational databases, for instance, a table contains 
the values of attributes directly, but references are "modeled" by the means of 
foreign keys. In object-relational persistence technologies such as JPA or Hibernate 
references can have additional life-cycle semantics, which define what to do with 
referenced objects in certain circumstances. Therefore you typically make a distinction 
between the two concepts, as we do in the e[Domain Model Example] you can create using 
the wizard. However, in this small scenario we do not need a separation therefore we 
stick with one single concept for features.

As the type reference has an additional property for the multiplicity (many or one), 
we make it a separate model element and parser rule e[TypeRef]. The presence of the 
postfix '*' in an input file should set the boolean flag to 'true' that indicates a multi-value
type reference in the AST model. 
This is the purpose of the assignment operator e['?=']. The parser rule looks like this:

code[Xtext][TypeRef :
  referenced=\[Type\] (multi?='*')?;
]

Again we have specified a cross-reference, which this time not only allows to 
reference entities but all instances of type. So far this only includes data type and entities, but 
you may want to introduce additional concepts in a future version, like for instance a 
Value Object as proposed in Eric Evan's great book e[Domain Driven Design].


In the end your grammar editor should look like this:

code[Xtext][grammar org.eclipse.xtext.example.Domainmodel 
  with org.eclipse.xtext.common.Terminals
  
generate domainmodel "http://www.eclipse.org/xtext/example/Domainmodel"  

DomainModel :
  (elements+=Type)*;
  
Type:
  DataType | Entity;
  
DataType:
  'datatype' name=ID;
 
Entity:
  'entity' name=ID ('extends' superType=\[Entity\])? '{'
    (features+=Feature)*
  '}';
 
Feature:
  name=ID ':' type=TypeRef;
  
TypeRef:
  referenced=\[Type\] (multi?='*')?;
  ]

section2[Generate Language Artifacts]

Now that we have the grammar in place and defined we need to run the generator that will derive the
various language components. 
To do so locate the file e[GenerateDomainmodel.mwe2] file next to the grammar 
file in the package explorer view. From its context menu, choose

  e[Run As -> MWE2 Workflow].


That will trigger the Xtext language generator. It generates the parser and 
serializer and some additional infrastructure code. You will see its logging 
messages in the Console View. 


section2[Run the Generated IDE Plug-in]

If the code generation succeeded, we are now able to test the IDE integration. 
Right-click on the Xtext project and choose


  e[Run As -> Eclipse Application].


This will spawn a new Eclipse workbench with your projects as plug-ins installed. 
In the new workbench, create a new project 
(File -> New -> Project...  -> General -> Project) and therein a new file 
with the file extension you chose in the beginning (*.dmodel). This will open
the generated entity editor. Try it a bit and discover the default 
functionality for code completion (e[CTRL SPACE] even for cross-references), 
syntax highlighting, syntactic validation, linking errors, outline, find
references etc.

img[images/getting-started-editor.png][][][width:50%]


section2[Adding a Namespace Concept]

At the current stage, our language puts all types into the same scope. As 
cross-references are specified by means of names, this can easily yield collisions 
as the model size increases. Avoiding such name clashes is why most programming 
languages invent concepts like namespaces or modules. We will now introduce the 
concept of a e[Package], which effectively is a namespace. 

Our languages's definition of a e[Package] is as follows: A package has a name and 
contains other named elements and namespace-imports. A named element is either another 
e[Package] or a e[Type]. Within a package, elements must have unique names. The 
e[fully qualified name] (FQN) of a named element consists of the FQN of its package, 
a separator e['.'] and its own simple name. Elements refer to each other using their 
e[qualified names] which may be relative to their common namespaces or absolute. By means 
of import statements, these names can be further abbreviated. 

That might sound a bit complicated at first but the good thing is that Xtext 
comes with exactly such a default semantic for namespaces, which feels very 
natural in practice. Although all aspects of this semantic are adaptable, we 
will stick to the defaults within this tutorial.

Before we extend the grammar, let's have a look how an example model would
look like when using the newly introduced concepts:

code[DomainExample][package my.types {
  datatype String
  datatype Boolean
}

package my.entities {
  
  import my.types.*
  
  entity Session {
    title: String
    isTutorial : Boolean
  }

  entity Conference {
    name : String
    attendees : Person*
    speakers : Speaker*
  }

  entity Person {
    name : String
  }

  entity Speaker extends Person {
    sessions : Session*
  }
}
]

Let's start to modify our grammar now. First we introduce the rule e[AbstractElement]:

code[Xtext][AbstractElement:
  PackageDeclaration | Type;
]

e[DomainModel] should now call e[AbstractElement] instead of e[Type]:  

code[Xtext][DomainModel:
  (elements+=AbstractElement)*;
]

To allow qualified names, we need a new rule e[QualifiedName]. This rule 
returns a string. But we do not want this to be a e[terminal rule], as terminal 
rules have special semantics (they are used context-less in the lexer, which 
often causes problems). Instead we want it to be a parser rule, but one which
doesn't return an instance of an e[EClass] from the referenced e[EPackage] but 
just a plain String. Such rules are called e[data type rules], because they return 
instances of e[EDataType] as opposed to instances of e[EClass]. String is the most 
often used e[EDataType] in this context and is therefore the default return 
type for data type rules. The rule looks like this:

code[Xtext][QualifiedName:
  ID ('.' ID)*;
]

Note, that Xtext automatically figures out that the rule is a e[data type rule] 
rather then a normal parser rule, because it doesn't contain any assignments 
and all rule calls go to either other e[data type rules] or e[terminal rules]. 
For a e[data type rule] the parser simply concatenates the consumed text and returns 
it as a string. The transformation to a user defined data type is done by so 
called ref:valueconverter[ValueConverters]. But as we use strings we don't need to care about 
e[ValueConverters] here.

Next up we need to define the syntax of e[PackageDeclarations], which makes use of 
the e[QualifiedName] rule but doesn't make use of anything we haven't yet talked about.

code[Xtext][PackageDeclaration:
  'package' name=QualifiedName '{'
    (elements+=AbstractElement)*
  '}';
  ]

Having qualified names at hand, we want to specify cross-references that 
way, too. As mentioned by default, Xtext assumes the rule e[ID] as the syntax 
for cross-references, which has been fully sufficient so far. But now we want 
to allow fully qualified names as well, so we explicitly specify the syntax rule 
after a delimiter e['|']:

fn.. Note, that the e['|'] has nothing to do with the previously introduced 
alternative operator. In the context of a cross-reference it is simply a delimiter.  

code[Xtext][Entity:
  'entity' name=ID ('extends' superType=\[Entity|QualifiedName\])? '{'
    (features+=Feature)*
  '}';
]

and

code[Xtext][TypeRef:
  referenced=\[Type|QualifiedName\] (multi?='*')?;
]

As the last step, we introduce imports. An e[Import] is an instance of 
e[AbstractElement], too, so that it can occur as a child of e[DomainModel] as 
well as of e[PackageDeclaration].

code[Xtext][AbstractElement:
  PackageDeclaration | Type | Import;
]

An imported namespace is not just a qualified name but it also allows an 
optional wildcard character e['*'] at the end, so that multiple names can be 
imported with one statement. That requires a new data type rule which we 
name e[QualifiedNameWithWildCard]:

code[Xtext][QualifiedNameWithWildCard:
  QualifiedName '.*'?;
]

The declaration of the e[Import] rule should look familiar by now:

code[Xtext][Import:
  'import' importedNamespace=QualifiedNameWithWildCard;
]

The default scoping implementation is based on naming conventions. First 
everything which has a name is referenceable. By default something has a name 
if it has a property e['name']. If such an e[EAttribute] is available, the default 
implementation computes a qualified name by asking the container for its name 
and concatenates the two names separated by a dot. The computation of qualified
names can be arbitrarily changed by implementing an e[IQualifedNameProvider]. 
The other naming convention is that if some element has an EAttribute 
'importedNamespace' that value is used as a namespace import and is automatically 
prefixed to any simple names used within that namespace. Also the asterisk e['*'] 
is used as a wildcard by default.

That's all for the grammar. It should now read as 

code[Xtext][grammar org.eclipse.xtext.example.Domainmodel 
   with org.eclipse.xtext.common.Terminals

generate domainmodel "http://www.eclipse.org/xtext/example/Domainmodel"

DomainModel:
  (elements+=AbstractElement)*;

AbstractElement:
  PackageDeclaration | Type | Import;
  
Import:
  'import' importedNamespace=QualifiedNameWithWildCard;

PackageDeclaration:
  'package' name=QualifiedName '{'
    (elements+=AbstractElement)*
  '}';

Type:
  Entity | DataType;

DataType:
  'datatype' name=ID;

Entity:
  'entity' name=ID ('extends' superType=\[Entity|QualifiedName\])? '{'
    (features+=Feature)*
  '}';

Feature:
  name=ID ':' type=TypeRef;

TypeRef:
  referenced=\[Type|QualifiedName\] (multi?='*')?;

QualifiedName:
  ID ('.' ID)*;
  
QualifiedNameWithWildCard:
  QualifiedName '.*'?;
]

Now you should regenerate the language infrastructure as described in the 
previous section, and give the editor a try. You can even split up your model 
into smaller parts and have cross-references across file boundaries, as long 
as the referenced models are on the classpath.

section-ref[processing_Xtext_models]

section-ref[getting_started_xpand]