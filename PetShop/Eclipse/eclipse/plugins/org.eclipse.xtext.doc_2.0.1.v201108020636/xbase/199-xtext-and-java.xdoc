chapter:Xbase[Xtext and Java]

The following chapter demonstrates how to integrate your own DSL with Java. We will do this in four
stages: First, you will learn how to refer to existing Java elements from within your language. Then
you will use Xbase to refer to generic types. In the third step, you will map your own DSL's concepts 
to Java concepts. Last but not least, you will use both Java types and your concepts within Xbase 
expressions and execute it. 

Throughout this chapter, we will step by step improve the ref:DomainmodelNextSteps[domain model example from the tutorial].  

section[Plug-in Setup]

In the following, we are going to use the JVM types model and the Xbase language library. To make these
available to your language, you have to add a couple of dependencies. In the runtime plug-in of your
language, add dependencies to   

ul[
item[e[org.eclipse.xtext.common.types]]
item[e[org.eclipse.xtext.xbase] and]
item[e[org.eclipse.xtext.xtend2.lib] if you are using Xtend to implement components.]
]

Your UI plug-in needs dependencies to
ul[
item[e[org.eclipse.xbase.ui]]
item[e[org.eclipse.xtext.common.types.ui]]
]

Additionally, you have to register the e[genmodel] of Xbase to the standalone setup of your MWE2 workflow
and make sure the codeRef[org.eclipse.xtext.generator.types.TypesGeneratorFragment] and the 
codeRef[org.eclipse.xtext.generator.xbase.XbaseGeneratorFragment] are included:

code[MWE2][
bean = StandaloneSetup {
  registerGenModelFile = 
     "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
}
...
fragment = types.TypesGeneratorFragment {}
fragment = xbase.XbaseGeneratorFragment {}
]

To avoid running out of memory when regenerating, you increase the maximum heap size and the permanent generation
space in the run configuration of your workflow. We recommend at least 

code[-Xmx512m -XX:MaxPermSize=128m] 

in the e[VM Arguments] section of the e[Arguments] tab. If you are experiencing ambiguity warnings from Antlr,
the ref:antlr_errors[usual countermeasures] apply.

section-ref[jvmtypes]

section-ref[xbaseJavaReferences]

section-ref[xbaseInferredType]

section-ref[xbaseExpressions]

section-ref[xbaseLanguageRef_Introduction]

section-ref[xbaseLanguageRef_Syntax]

section-ref[xbaseLanguageRef_Types]

section-ref[xbaseLanguageRef_Expressions]

section-ref[xbaseLanguageRef_LibraryExtension]

