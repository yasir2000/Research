section:xbaseLanguageRef_Expressions[Expressions]

Expressions are the main language constructs which are used to express behavior and computation of values. The concept of 
statements is not supported, but instead powerful expressions are used to handle situations in which the imperative nature of statements would
be helpful, too. An 
expression always results in a value (might be the value 'null' though). In addition every resolved expressions is
of a static type.

section2:Xbase_Expressions_Literals[Literals]

A literal denotes a fixed unchangeable value. Literals for string, integers, booleans,
null and Java types are supported.

section3:Xbase_Expressions_StringLiterals[String Literals]

A string literal as syntactically defined in ref:Xbase_Syntax_StringLiteral is a valid expression and returns an instance of code[java.lang.String] of the given value.

ul[
	item[code['Hello World !']]
	item[code["Hello World !"]]
	item[code["Hello 
		World !"
	]]
]

section3:Xbase_Expressions_IntegerLiterals[Integer Literals]

An integer literal as defined in ref:Xbase_Syntax_IntegerLiteral creates an code[int].
There is no signed int. If you put a minus operator in front of an int literal it is taken as a UnaryOperator
with one argument (the positive int literal).

ul[
	item[code[42]]
	item[code[234254]]
]

section3:Xbase_Expressions_BooleanLiteral[Boolean Literals]

There are two boolean literals, code[true] and code[false] which correspond to their Java counterpart of type e[boolean]. 

ul[
	item[code[Xbase][true]]
	item[code[Xbase][false]]
]

section3:Xbase_Expressions_NullLiteral[Null Literal]

The null pointer literal is, like in Java, code[null]. 
It is a member of any reference type.

ul[
	item[code[Xbase][null]]
]

section3:Xbase_Expressions_TypeLiteral[Type Literals]

Type literals are specified using the keyword e[typeof] :

ul[
  item[code[Xbase][typeof(java.lang.String)] which yields java.lang.String.class]
]

section2:Xbase_Expressions_TypeCasts[Type Casts]

Type cast behave like casts in Java, but have a slightly more readable syntax.
Type casts bind stronger than any other operator but weaker than feature calls.

The conformance rules for casts are defined in the link[http://java.sun.com/docs/books/jls/third_edition/html/conversions.html#5.5][Java Language Specification].

section3[Syntax]

code[Xtext][
XCastedExpression:
	Expression 'as' JvmTypeReference;
]

section3[Examples]

ul[
	item[code[Xbase][my.foo as MyType]]
	item[code[Xbase][(1 + 3 * 5 * (- 23)) as BigInteger]]
]

section2:Xbase_Expressions_Operators[Infix Operators / Operator Overloading]

There are a couple of common predefined infix operators. In contrast to Java, the operators are not limited
to operations on certain types. Instead an operator-to-method mapping allows users to redefine the 
operators for any type just by implementing the corresponding method signature.
The following defines the operators and the corresponding Java method signatures / expressions.

table[
	tr[td[code[e1 += e2]]				td[code[e1._operator_add(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 || e2]]				td[code[e1._operator_or(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 && e2]]				td[code[e1._operator_and(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 == e2]]				td[code[e1._operator_equals(e2)]]]
	tr[td[code[e1 != e2]]				td[code[e1._operator_notEquals(e2)]]]
	tr[td[code[e1 < e2]]				td[code[e1._operator_lessThan(e2)]]]
	tr[td[code[e1 > e2]]				td[code[e1._operator_greaterThan(e2)]]]
	tr[td[code[e1 <= e2]]				td[code[e1._operator_lessEqualsThan(e2)]]]
	tr[td[code[e1 >= e2]]				td[code[e1._operator_greaterEqualsThan(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 -> e2]]				td[code[e1._operator_mappedTo(e2)]]]
	tr[td[code[e1 .. e2]]				td[code[e1._operator_upTo(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 + e2]]				td[code[e1._operator_plus(e2)]]]
	tr[td[code[e1 - e2]]				td[code[e1._operator_minus(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[e1 * e2]]				td[code[e1._operator_multiply(e2)]]]
	tr[td[code[e1 / e2]]				td[code[e1._operator_divide(e2)]]]
	tr[td[code[e1 % e2]]				td[code[e1._operator_modulo(e2)]]]
	tr[td[code[e1 ** e2]]				td[code[e1._operator_power(e2)]]]
	tr[td[code[ ]]						td[code[ ]]]
	
	tr[td[code[! e1]]					td[code[e1._operator_not()]]]
	tr[td[code[- e1]]					td[code[e1._operator_minus()]]]
	tr[td[code[ ]]						td[code[ ]]]
]
		
The table above also defines the operator precedence in ascending order. The blank lines separate precedence levels. 
The assignment operator code[+=] is right-to-left associative in the same way as the plain assignment
operator code[=] is. That is a = b = c is executed as a = (b = c), all other
operators are left-to-right associative. Parenthesis can be used to adjust the default precedence and associativity. 

section3[Short-Circuit Boolean Operators]

If the operators code[||] and code[&&] are used in a context where the left hand operand is of type boolean, the operation is evaluated
in short circuit mode, which means that the right hand operand might not be evaluated at all in the following cases: 
ol[
	item[in the case of code[||] the operand on the right hand side is not evaluated if the left operand evaluates to code[Xbase][true].]
	item[in the case of code[&&] the operand on the right hand side is not evaluated if the left operand evaluates to code[Xbase][false].]
] 

section3[Examples]

ul[
	item[code[my.foo = 23]]
	item[code[myList += 23]]
	item[code[x > 23 && y < 23]]
	item[code[x && y || z]]
	item[code[1 + 3 * 5 * (- 23)]]
	item[code[!(x)]]
	item[code[my.foo = 23]]
	item[code[my.foo = 23]]
]

section3:Xbase_Expressions_PropertyAssignment[Assignments]

ref:Xbase_Expressions_VariableDeclaration[Local variables] can be reassigned using the code[=] operator. Also properties can be set using 
that operator:
Given the expression 

code[Xbase][
	myObj.myProperty = "foo"
]

The compiler first looks up whether there is an accessible Java Field called code[myProperty] on the type of code[myObj]. If there is one it translates to
the following Java expression :

code[Java][
	myObj.myProperty = "foo";
]

Remember in Xbase everything is an expression and has to return something. In the case of simple assignments the return value is the value returned from the corresponding
Java expression, which is the assigned value.

If there is no accessible field on the left operand's type, a method called code[setMyProperty(OneArg)] (JavaBeans
setter method) is looked up. It has to take one argument of the type (or a super type) of the right hand operand. The return value will be whatever the 
setter method returns (which usually is code[null]). 
As a result the compiler translates to :

code[Java][
	myObj.setMyProperty("foo")
]

section2:Xbase_Expressions_FeatureCalls[Feature Calls]

A feature call is used to invoke members of objects, such as fields and methods, but also can refer to local variables and parameters, 
which are made available for the current expression's scope. 

section3[Syntax]

The following snippet is a simplification of the real Xtext rules, which cover more than the concrete syntax.
code[Xtext][
FeatureCall :
	ID |
	Expression ('.' ID ('(' Expression (',' Expression)* ')')?)*
]

section3:Xbase_Expressions_PropertyAccess[Property Access]

Feature calls are directly translated to their Java equivalent with the exception, that for calls to properties an equivalent rule as 
described in ref:Xbase_Expressions_PropertyAssignment applies. 
That is, for the following expression

code[Xbase][
	myObj.myProperty
]

the compiler first looks for an accessible field in the type of code[Xbase][myObj]. If no such field exists it looks for a method called code[Java][myProperty()] before it looks 
for the getter methods code[Java][getMyProperty()]. If none of these members can be found the expression is unbound and a compiliation error is thrown.

section3:Xbase_Expressions_ImplicitThis[Implicit 'this' variable]

If the current scope contains a variable named code[Xbase][this], the compiler will make all its members available to the scope. 
That is if 
code[Xbase][
	this.myProperty
]
is a valid expression
code[Xbase][
	myProperty
]
is valid as well and is equivalent, as long as there is no local variable 'myProperty' on the scope,
which would have higher precedence.

%%section2:spreadOperator[Spread Operator]
%%
%%Xbase provides a special sugared notation to invoke a certain feature on each element of an iterable
%%and obtain the results as a list. This is essentially a short cut notation for a higher order function on code[java.lang.Iterable].
%%If you for instance want the names of all persons in a code[List] you could write the following using a higher order function and a closures:
%%
%%code[
%%	listOfPersons.collect(e|e.name)
%%]
%%
%%However because this situation is so common Xbase provides a special sugared expression for that.
%%So alternatively to the code above you can write:
%%
%%code[
%%	listOfPersons*.name
%%]
%%
%%Note that we decided to come up with an explicit operator (*.) because overloading the '.' operator as it is the case in Xpand,
%%has caused a lot of surprises in the past. With an explicit operator the tooling as well as the user always can distinguish whether you
%%invoke a feature on the iterables elements or on the iterable itself.
%%Also note that this really is just a shortcut for collect. It doesn't do any flattening, when you invoke it on iterables containing iterables.
%%
%%The operator works on all members of code[java.lang.Iterable]. the return type is always an code[java.util.List<T>] where code[T]
%%is the return type of the called feature.
%%
%%e[TODO: Discuss, whether we want do an eager transformation of the iterable (and thereby provide a suiteable return type such as list if 
%%'this' is a list or 'collection' if this is a collection). Otherwise we'll have to restrict the parameters of the spread operation
%%to final values (capture context as we do for closures). ]
%%
%%section3[Syntax]
%%
%%code[
%%XIterableFeatureCall:
%%	PrimaryExpression ('*.') FeatureCall;
%%]
%%
%%section3[Examples]
%%
%%ul[
%%	item[code[myListOfPersons*.name]]
%%]
%%
section3:Xbase_Expressions_NullSafeFeatureCalls[Null-Safe Feature Call]

Checking for null references can make code very unreadable. In many situations it is ok for an expression to return null if a receiver was null.
Xbase supports the safe navigation operator code[?.] to make such code more readable.

Instead of writing 

code[Java][
	if ( myRef != null ) myRef.doStuff()
]

one can write

code[Xbase][
	myRef?.doStuff()
]

section2:Xbase_Expressions_ConstructorCall[Constructor Call]

Construction of objects is done by invoking Java constructors. The syntax is exactly as in Java.

section3[Examples]

ul[
	item[
		code[Xbase][
			new String()
		]
	]
	item[
		code[Xbase][
			new java.util.ArrayList<java.math.BigDecimal>()
		]
	]
]

section3[Syntax]

code[Xtext][
XConstructorCall:
  'new' QualifiedName 
  		('<' JvmTypeArgument (',' JvmTypeArgument)* '>')? 
  		('('(XExpression (',' XExpression)*)?')')?;
]

section2:Xbase_Expressions_Closures[Closures]

A closure is a literal that defines an anonymous function. A closure also captures the current scope,
so that any final variables and parameters visible at construction time can be referred to in the closure's expression. 

section3[Syntax]

code[Xtext][
XClosure:
	'\[' ( JvmFormalParameter (',' JvmFormalParameter)* )? 
		'|' XExpression '\]';
]

The surrounding square brackets are optional if the closure is the single argument of a method invocation.
That is you can write

code[Xbase][
	myList.find(e|e.name==null)
]

instead of

code[Xbase][
	myList.find(\[e|e.name==null\])
]

But in all other cases the square brackets are mandatory:

code[Xbase][
	val func = \[String s| s.length>3\]
]

section3:Xbase_Expressions_ClosuresTypeInference[Typing]

Closures are expressions which produce function objects. The type is a ref:Xbase_Types_FunctionTypes[function type], consisting of the types of the 
parameters as well as the return type. The return type is never specified explicitly but is always inferred from the expression. 
The parameter types can be inferred if the closure is used in a context where this is possible.

For instance, given the following Java method signature:
code[Java][
	public T <T>getFirst(List<T> list, Function0<T,Boolean> predicate) 
] 

the type of the parameter can be inferred. Which allows users to write:
code[Xbase][
	arrayList( "Foo", "Bar" ).findFirst( e | e == "Bar" )
]
instead of 
code[Xbase][
	arrayList( "Foo", "Bar" ).findFirst( String e | e == "Bar" )
]

section3:Xbase_Expressions_FunctionMapping[Function Mapping]

An Xbase closure is a Java object of one of the e[Function] interfaces shipped with the runtime library of Xbase. There is an interface 
for each number of parameters (current maximum is six parameters). The names of the interfaces are 
ul[
	item[e[Function0<ReturnType>] for zero parameters, ]
	item[e[Function1<Param1Type, ReturnType>] for one parameters, ]
	item[e[Function2<Param1Type, Param2Type, ReturnType>] for two parameters, ]
	item[... ]
	item[e[Function6<Param1Type, Param2Type, Param3Type, Param4Type, Param5Type, Param6Type, ReturnType>] for six parameters, ]
]

In order to allow seamless integration with existing Java libraries such as the JDK or Google Guava (formerly known as Google Collect) closures
are auto coerced to expected types if those types declare only one method (methods from java.lang.Object
don't count).

As a result given the method code[java.util.Collections.sort(List<T>, Comparator<? super T>)] is available
as an extension method, it can be invoked like this

code[Xbase][
newArrayList( 'aaa', 'bb', 'c' ).sort(
	e1, e2 | if ( e1.length > e2.length ) {
				-1 
			 } else if ( e1.length < e2.length ) { 
				1
			 } else { 
				0
			 })
]

section3[Examples]

ul[
	item[code[Xbase][\[ | "foo" \]   // closure without parameters]]
	item[code[Xbase][\[ String s | s.toUpperCase() \] // explicit argument type]]
	item[code[Xbase][\[ a,b,a | a+b+c \] // inferred argument types]]
]

section2:Xbase_Expressions_IfExpression[If Expression]

An if expression is used to choose two different values based on a predicate. While it has the syntax of Java's if statement it behaves  
like Java's ternary operator (code[Java][predicate ? thenPart : elsePart]), i.e. it is an expression that returns a value. Consequently, you can use 
if expressions deeply nested within expressions.

section3[Syntax]

code[Xtext][
XIfExpression:
	'if' '(' XExpression ')'
		XExpression
	('else' XExpression)?;
]

An expression code[Xbase][if (p) e1 else e2] results in either the value code[e1] or code[e2] depending on whether the predicate code[p] 
evaluates to code[Xbase][true] or code[Xbase][false]. The else part is optional which is a shorthand for code[Xbase][else null].
That means 

code[Xbase][
	if (foo) x 
]

is the a short hand for

code[Xbase][
	if (foo) x else null
]

section3:Xbase_Expressions_IfTypeInference[Typing]

The type of an if expression is calculated by the return types code[T1] and code[T2] of the two expression code[e1] and code[e2].
It uses the rules defined in ref:Xbase_Types_CommonSuperType.

section3[Examples]

ul[
	item[code[Xbase][if (isFoo) this else that]]
	item[code[Xbase][if (isFoo) { this } else if (thatFoo) { that } else { other }]]
	item[code[Xbase][if (isFoo) this]]
]

section2:Xbase_Expressions_SwitchExpression[Switch Expression]

The switch expression is a bit different from Java's. First, there is no fall through which means only one case is evaluated at most.
Second, the use of switch is not limited to certain values but can be used for any object reference instead.
 
For a switch expression 
code[Xbase][
switch e {
	case e1 : er1
	case e2 : er2
	...
	case en : ern
	default : er
}
]

the main expression code[e] is evaluated first and then each case sequentially. If the switch expression
contains a variable declaration using the syntax known from ref:Xbase_Expressions_ForLoop, the value is bound to the given name.
Expressions of type code[java.lang.Boolean] or code[boolean] are not allowed in a switch expression.

The guard of each case clause is evaluated until the switch value equals the result of the case's guard expression or if the case's guard expression evaluates to code[true].
Then the right hand expression of the case evaluated and the result is returned.

If none of the guards matches the default expression is evaluated an returned. If no default expression
is specified the expression evaluates to code[Xbase][null].

Example:

code[Xbase][
switch myString {
	case myString.length>5 : 'a long string.'
	case 'foo' : 'It's a foo.'
	default : 'It's a short non-foo string.'
}
]

section3[Type guards]

In addition to the case guards one can add a so called e[Type Guard] which is syntactically just a ref:Xbase_Types_TypeReferences[type reference] preceding
the than optional case keyword. The compiler will use that type for the switch expression in subsequent expressions.
Example:
code[Xbase][
var Object x = ...;
switch x {
	String case x.length()>0 : x.length()
	List<?> : x.size()
	default : -1
}
]

Only if the switch value passes a type guard, i.e. an instanceof operation returns code[true], the case's guard expression is executed using the same semantics explained in
previously. 
If the switch expression contains an explicit declaration of a local variable or the expression references a local variable,
the type guard acts like a cast, that is all references to the switch value will be of the type specified in the type guard.

section3[Typing]

The return type of a switch expression is computed using the rules defined in ref:Xbase_Types_CommonSuperType. The set of types from which the common super type is 
computed corresponds to the types of each case's result expression. In case a switch expression's type is
computed using the expected type from the context, it is sufficient to return the expected type if all case branches types conform to the expected type.

section3[Examples]

ul[
	item[
		code[Xbase][
			switch foo {
				Entity : foo.superType.name
				Datatype : foo.name
				default : throw new IllegalStateException
			}
		]
	]
	item[
		code[Xbase][
			switch x : foo.bar.complicated('hello',42) {
				case "hello42" : ...
				case x.length<2 : ...
				default : ....
			}
		]
	]
]

section3[Syntax]

code[Xtext][
XSwitchExpression:
	'switch' (ID ':')? XExpression '{'
		XCasePart+
		('default' ':' XExpression))?
	'}';

XCasePart:
	JvmTypeReference? ('case' XExpression)? ':' XExpression );
}
]

section2:Xbase_Expressions_VariableDeclaration[Variable Declarations]

Variable declarations are only allowed within ref:Xbase_Expressions_Blocks[blocks]. They are visible in any subsequent expressions in
the block. Although overriding or shadowing variables from outer scopes is allowed, it is usually only
used to overload the variable name 'this', in order to subsequently access an object's features in an
unqualified manner.

A variable declaration starting with the keyword code[Xbase][val] denotes a so called value, which is essentially a final (i.e. unsettable) variable. In rare cases, one
needs to update the value of a reference. In such situations the variable needs to be declared with the keyword code[Xbase][var], which stands for 'variable'.

A typical example for using code[Xbase][var] is a counter in a loop. 
code[Xbase][
{
	val max = 100
	var i = 0
	while (i > max) {
		println("Hi there!")
		i = i +1
	}
}
]

Variables declared outside a closure using the code[var] keyword are not accessible from within a
closure.

section3[Syntax]

code[Xtext][
XVariableDeclaration:
	('val' | 'var') JvmTypeReference? ID '=' XExpression;
]

section3[Typing]

The return type of a variable declaration expression is always code[void]. 
The type of the variable itself can either be explicitly declared or be inferred from the right hand side expression.
Here is an example for an explicitly declared type:
code[Xbase][
	var List<String> msg = new ArrayList<String>(); 
]
In such cases, the right hand expression's type must ref:Xbase_Types_ConformanceRules[conform] to the type on the left hand side. 

Alternatively the type can be left out and will be inferred from the initialization expression:  
code[Xbase][
	var msg = new ArrayList<String>(); // -> type ArrayList<String>  
]

section2:Xbase_Expressions_Blocks[Blocks]

The block expression allows to have imperative code sequences. It consists of a sequence of expressions, and returns the value of the last expression.
The return type of a block is also the type of the last expression. Empty blocks return code[null]. 
ref:Xbase_Expressions_VariableDeclaration[Variable declarations] are only allowed within blocks and cannot be used as a block's last expression.

A block expression is surrounded by curly braces and contains at least one expression.
It can optionally be terminated by a semicolon.

section3[Examples]

code[Xbase][
{
	doSideEffect("foo")
	result
}
]
code[Xbase][
{
	var x = greeting();
	if (x.equals("Hello ")) {
		x+"World!"; 
	} else {
		x;
	}
}
]

section3[Syntax]

code[Xtext][
XBlockExpression:
	'{'
		(XExpressionInsideBlock ';'?)*
	'}';
]

section2:Xbase_Expressions_ForLoop[For Loop]

The for loop code[Xbase][for (T1 variable : iterableOfT1) expression] is used to execute a certain expression for each element of an
array of an instance of code[java.lang.Iterable].
The local code[variable] is final, hence canot be updated. 

The return type of a for loop is code[Xbase][void].
The type of the local variable can be left out. In that case it is inferred from the type of the array
or code[java.lang.Iterable] returned by the iterable expression.

ul[
	item[
		code[Xbase][
			for (String s : myStrings) {
				doSideEffect(s);
			}
		]
	]
	item[
		code[Xbase][
			for (s : myStrings)
				doSideEffect(s)
		]
	]
]

section3[Syntax]

code[Xtext][
XForExpression:
	'for' '(' JvmFormalParameter ':' XExpression ')' 
		XExpression
	;
]

section2:Xbase_Expressions_WhileExpression[While Loop]

A while loop code[Xbase][while (predicate) expression] is used to execute a certain expression unless the predicate is evaluated to code[Xbase][false].
The return type of a while loop is code[Xbase][void].

section3[Syntax]

code[Xtext][
XWhileExpression:
	'while' '(' predicate=XExpression ')'
		body=XExpression;
] 

section3[Examples]

ul[
	item[code[Xbase][
		while (true) {
			doSideEffect("foo");
		}
	]]
	item[code[Xbase][
		while ( ( i = i + 1 ) < max ) 
			doSideEffect( "foo" )
	]]
]

section2:Xbase_Expressions_DoWhileExpression[Do-While Loop]

A do-while loop code[Xbase][do expression while (predicate)] is used to execute a certain expression unless the predicate is evaluated to code[Xbase][false].
The difference to the ref:Xbase_Expressions_WhileExpression[while loop] is that the execution starts by executing the block once before evaluating the predicate for the first time.
The return type of a do-while loop is code[Xbase][void].

section3[Syntax]

code[Xtext][
XDoWhileExpression:
	'do'
		body=XExpression
	'while' '(' predicate=XExpression ')';
] 

section3[Examples]

ul[
	item[code[Xbase][
		do {
			doSideEffect("foo");
		} while (true)
	]]
	item[code[Xbase][
		do doSideEffect("foo") while ((i=i+1)<max)
	]]
]

section2:Xbase_Expressions_Return[Return Expression]

Although an explicit return is often not necessary, it is supported.
In a closure for instance a return expression is always implied if the expression itself is not of type
code[Xbase][void]. Anyway you can make it explicit:

code[Xbase][
	listOfStrings.map(e| {
		if (e==null) 
			return "NULL"
		e.toUpperCase
	}) 
]

section2:Xbase_Expressions_Throw[Throwing Exceptions]

Like in Java it is possible to throw code[java.lang.Throwable]. The syntax is exactly the same as in Java.

code[Xbase][
{
	...
	if (myList.isEmpty)
		throw new IllegalArgumentException("the list must not be empty")
	...
} 	
]

section2:Xbase_Expressions_TryCatch[Try, Catch, Finally]

The try-catch-finally expression is used to handle exceptional situations.
You are not forced to declare checked exceptions, if you don't catch checked exceptions they are rethrown
in a wrapping runtime exception. 
Other than that the syntax again is like the one known from Java.

code[Xbase][
	try {
		throw new RuntimeException()
	} catch (NullPointerException e) {
		// handle e
	} finally {
		// do stuff
	}
]
