section:validation[Validation]

Static analysis or validation is one of the most interesting aspects when developing a programming
language. The users of your languages will be grateful if they get informative feedback as they type. 
In Xtext there are basically three different kinds of validation.


section2[Automatic Validation]

Some implementation aspects (e.g. the grammar, scoping) of a language have an impact on what is required 
for a document or semantic model to be valid. Xtext automatically takes care of this. 


section3:syntactical_validation[Lexer/Parser: Syntactical Validation]

The syntactical correctness of any textual input is validated automatically by the parser. The error 
messages are generated by the underlying parser technology. One can use the 
codeRef[org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider]-API to customize this messages.
Any syntax errors can be retrieved from the Resource using the common EMF API:

ul[
item[codeRef[org.eclipse.emf.ecore.resource.Resource][Resource.getErrors()]]
item[codeRef[org.eclipse.emf.ecore.resource.Resource][Resource.getWarnings()]]
]


section3:linking_validation[Linker: Crosslink Validation]

Any broken crosslinks can be checked generically. As crosslink resolution is done lazily 
(see ref:linking[linking]), any broken links are resolved lazily as well. If you want to validate whether 
all links are valid, you will have to navigate through the model so that all installed EMF proxies 
get resolved. This is done automatically in the editor.

Similar to syntax errors, any unresolvable crosslinks will be reported and can be obtained through:

ul[
item[codeRef[org.eclipse.emf.ecore.resource.Resource][Resource.getErrors()]]
item[codeRef[org.eclipse.emf.ecore.resource.Resource][Resource.getWarnings()]]
]


section3:concrete_syntax_validation[Serializer: Concrete Syntax Validation]

The codeRef[org.eclipse.xtext.validation.IConcreteSyntaxValidator] validates all constraints that are 
implied by a grammar. Meeting these constraints for a model is mandatory to be serialized.

Example:

code[Xtext][MyRule:
  ({MySubRule} "sub")? (strVal+=ID intVal+=INT)*;
	]

This implies several constraints:
ol[
	item[Types: only instances of e[MyRule] and e[MySubRule] are allowed for this rule. Subtypes are 
		prohibited, since the parser never instantiates unknown subtypes.]
	item[Features: In case the e[MyRule] and e[MySubRule] have codeRef[org.eclipse.emf.ecore.EStructuralFeature][EStructuralFeatures] 
		besides e[strVal] and e[intVal], only e[strVal] and e[intVal] may have 
		ref:transientvalues[non-transient values].]
	item[Quantities: The following condition must be true: code[Java][strVal.size() == intVal.size()].]
	item[Values: It must be possible to ref:valueconverter[convert all values] to valid tokens for 
		terminal rule e[STRING].  The same is true for e[intVal] and e[INT].]
]

The typical use case for the concrete syntax validator is validation in non-Xtext-editors that, 
however, use an codeRef[org.eclipse.xtext.resource.XtextResource]. This is, for example, the case 
when combining GMF and Xtext. Another use case is when the semantic model is modified "manually" 
(not by the parser) and then serialized again. Since it is very difficult for the serializer to provide 
ref:parsetreeconstructor[meaningful error messages], the concrete syntax validator is executed by default
before serialization. A textual Xtext editor itself is e[not] a valid use case. Here, the parser ensures 
that all syntactical constraints are met. Therefore, there is no value in additionally running the 
concrete syntax validator.  

There are some limitations to the concrete syntax validator which result from the fact that it treats 
the grammar as declarative, which is something the parser doesn't always do.

ul[
item[Grammar rules containing assigned actions (e.g. code[Xtext][{MyType.myFeature=current}] are ignored. 
	Unassigned actions (e.g. code[Xtext][{MyType}]), however, are supported. ]
item[Grammar rules that delegate to one or more rules containing assigned actions via unassigned rule 
	calls are ignored.]
item[Orders within list-features can not be validated. e.g. code[Xtext][Rule: (foo+=R1 foo+=R2)*] implies 
	that e[foo] is expected to contain instances of e[R1] and e[R2] in an alternating order.]
]

To use concrete syntax validation you can let Guice inject an instance of 
codeRef[org.eclipse.xtext.validation.IConcreteSyntaxValidator] and use it directly. 
Furthermore, there is an codeRef[org.eclipse.xtext.validation.impl.ConcreteSyntaxEValidator][adapter] which
allows to use the concrete syntax validator as an codeRef[org.eclipse.emf.ecore.EValidator]. 
You can, for example, enable it in your runtime module, by adding:

code[Java][@SingletonBinding(eager = true)
public Class<? extends ConcreteSyntaxEValidator> 
      bindConcreteSyntaxEValidator() {
  return ConcreteSyntaxEValidator.class;
}]

To customize error messages please see 
codeRef[org.eclipse.xtext.validation.IConcreteSyntaxDiagnosticProvider] and subclass 
codeRef[org.eclipse.xtext.validation.impl.ConcreteSyntaxDiagnosticProvider].


section2:custom_validation[Custom Validation]

In addition to the afore mentioned kinds of validation, which are more or less done automatically, 
you can specify additional constraints specific for your Ecore model. We leverage existing 
codeRef[org.eclipse.emf.ecore.EValidator][EMF API] and have put some convenience stuff on top. 
Basically all you need to do is to make sure that an codeRef[org.eclipse.emf.ecore.EValidator] is 
registered for your codeRef[org.eclipse.emf.ecore.EPackage]. The  
codeRef[org.eclipse.emf.ecore.EValidator$Registry] can only be filled 
programmatically. That means contrary to the codeRef[org.eclipse.emf.ecore.EPackage$Registry] and the 
codeRef[org.eclipse.emf.ecore.resource.Resource$Factory$Registry] there is no Equinox extension 
point to populate the validator registry.

For Xtext we provide a ref:generator_fragment[generator fragment] for the convenient Java-based 
codeRef[org.eclipse.emf.ecore.EValidator] API. Just add the following fragment to your generator 
configuration and you are good to go:

code[MWE2][
fragment = 
	org.eclipse.xtext.generator.validation.JavaValidatorFragment {}
]

The generator will provide you with two Java classes. An abstract class generated to e[src-gen/] which 
extends the library class codeRef[org.eclipse.xtext.validation.AbstractDeclarativeValidator]. This 
one just registers the codeRef[org.eclipse.emf.ecore.EPackage][EPackages] for which this validator introduces constraints.
The other class is a subclass of that abstract class and is generated to the e[src/] folder in order 
to be edited by you. That is where you put the constraints in.

The purpose of the codeRef[org.eclipse.xtext.validation.AbstractDeclarativeValidator] is to allow you to 
write constraints in a declarative way - as the class name already suggests. That is instead of writing 
exhaustive if-else constructs or extending the generated EMF switch you just have to add the 
codeRef[org.eclipse.xtext.validation.Check] annotation to any method and it will be invoked automatically
when validation takes place. Moreover you can state for what type the respective constraint method is, just 
by declaring a typed parameter. This also lets you avoid any type casts. In addition to the reflective 
invocation of validation methods the codeRef[org.eclipse.xtext.validation.AbstractDeclarativeValidator] 
provides a couple of convenient assertions.

All in all this is very similar to how JUnit 4 works. Here is an example:

code[Java][
public class DomainmodelJavaValidator 
  extends AbstractDomainmodelJavaValidator {
    
  @Check
  public void checkTypeNameStartsWithCapital(Type type) {
    if (!Character.isUpperCase(type.getName().charAt(0)))
      warning("Name should start with a capital", 
        DomainmodelPackage.TYPE__NAME);
  }
}
]

You can also implement quick fixes for individual validation errors and warnings. See the 
ref:quickfixes[chapter on quick fixes] for details.


section2[Validating Manually]

As noted above, Xtext uses EMF's codeRef[org.eclipse.emf.ecore.EValidator] API to register validators. 
You can run the validators on your model programmatically using EMF's 
codeRef[org.eclipse.emf.ecore.util.Diagnostician], e.g.

code[Java][
EObject myModel = myResource.getContents().get(0);
Diagnostic diagnostic = Diagnostician.INSTANCE.validate(myModel);
switch (diagnostic.getSeverity()) {
  case Diagnostic.ERROR:
    System.err.println("Model has errors: ",diagnostic);
    break;
  case Diagnostic.WARNING:
    System.err.println("Model has warnings: ",diagnostic);
}
]

section2:test_validators[Test Validators]

If you have implemented your validators by extending 
codeRef[org.eclipse.xtext.validation.AbstractDeclarativeValidator], there are helper classes which
assist you when testing your validators.

Testing validators typically works as follows: 
ol[
	item[The test creates some models which intentionally violate some constraints.]
	item[The test runs some chosen codeRef[org.eclipse.xtext.validation.Check][@Check-methods] from the validator.]
	item[The test asserts whether the codeRef[org.eclipse.xtext.validation.Check][@Check-methods] have raised the expected warnings and errors.]
]

To create models, you can either use EMF's codeRef[org.eclipse.emf.ecore.resource.ResourceSet] to 
load models from your hard disk or you can utilize the e[MyDslFactory] that EMF generates 
for each codeRef[org.eclipse.emf.ecore.EPackage], to construct the tested model elements manually. 
While the first option has the advantages that you can edit your models in your textual concrete syntax, 
the second option has the advantage that you can create partial models.

To run the codeRef[org.eclipse.xtext.validation.Check][@Check-methods] and ensure they raise the intended errors and warnings, you can utilize 
codeRef[org.eclipse.xtext.junit.validation.ValidatorTester] as shown by the following example:

Validator:

code[Java][public class MyLanguageValidator extends AbstractDeclarativeValidator {
  @Check
  public void checkFooElement(FooElement element) {
    if(element.getBarAttribute().contains("foo"))
      error("Only Foos allowed", element, 
        MyLanguagePackage.FOO_ELEMENT__BAR_ATTRIBUTE, 101);
  }
}
]

JUnit-Test:

code[Java][public class MyLanguageValidatorTest extends AbstractXtextTests {

  private ValidatorTester<MyLanguageValidator> tester;

  @Override
  public void setUp() {
    with(MyLanguageStandaloneSetup.class);
    MyLanguageValidator validator = get(MyLanguageValidator.class);
    tester = new ValidatorTester<TestingValidator>(validator);
  }

  public void testError() {
    FooElement model = MyLanguageFactory.eINSTANCE.createFooElement()
    model.setBarAttribute("barbarbarbarfoo");
    
    tester.validator().checkFooElement(model);
    tester.diagnose().assertError(101);
  }
  
  public void testError2() {
    FooElement model = MyLanguageFactory.eINSTANCE.createFooElement()
    model.setBarAttribute("barbarbarbarfoo");
    
    tester.validate(model).assertError(101);
  }
}
]

This example uses JUnit 3, but since the involved classes from Xtext have no dependency on JUnit 
whatsoever, JUnit 4 and other testing frameworks will work as well.  JUnit runs the code[Java][setUp()]-method 
before each test case and thereby helps to create some common state. In this example, the validator 
is instantiated by means of Google Guice. As we inherit from the codeRef[org.eclipse.xtext.junit.AbstractXtextTests]
there are a plenty of useful methods available and the state of the global EMF singletons will be restored in the
method code[Java][tearDown()]. Afterwards, the codeRef[org.eclipse.xtext.junit.validation.ValidatorTester] 
is created and parameterized with the actual validator. It acts as a wrapper for the validator, 
ensures that the validator has a valid state and provides convenient access to the validator itself 
(code[Java][tester.validator()]) as well as to the utility classes which assert diagnostics created by the validator 
(code[Java][tester.diagnose()]). Please be aware that you have to call code[Java][validator()] before you can call code[Java][diagnose()]. 
However, you can call code[Java][validator()] multiple times in a row.

While code[Java][validator()] allows to call the validator's codeRef[org.eclipse.xtext.validation.Check][@Check-methods] directly, 
code[Java][validate(model)] leaves it to the framework to call the applicable codeRef[org.eclipse.xtext.validation.Check][@Check-methods]. However, to avoid 
side-effects between tests, it is recommended to call the codeRef[org.eclipse.xtext.validation.Check][@Check-methods] directly.

code[Java][diagnose()] and code[Java][validate(model)] return an object of type 
codeRef[org.eclipse.xtext.junit.validation.AssertableDiagnostics] which provides 
several e[assert]-methods to verify whether the expected diagnostics are present:

ul[
	item[code[Java][assertError(int code)]: There must be one diagnostic with severity ERROR and the supplied error code.]
	item[code[Java][assertErrorContains(String messageFragment)]: There must be one diagnostic with severity ERROR and 
		its message must contain e[messageFragment].]
	item[code[Java][assertError(int code, String messageFragment)]: Verifies severity, error code and messageFragment.]
	item[code[Java][assertWarning(...)]: This method is available for the same combination of parameters as code[Java][assertError()].]
	item[code[Java][assertOK()]: Expects that no diagnostics (errors, warnings etc.) have been raised.   ]
	item[code[Java][assertDiagnostics(int severity, int code, String messageFragment)]: Verifies severity, 
		error code and messageFragment.]
	item[code[Java][assertAll(DiagnosticPredicate... predicates)]: Allows to describe multiple diagnostics at the 
		same time and verifies that all of them are present. Class 
		codeRef[org.eclipse.xtext.junit.validation.AssertableDiagnostics] contains static code[Java][error()] and 
		code[Java][warning()] methods which help to create the needed 
		codeRef[org.eclipse.xtext.junit.validation.AssertableDiagnostics$DiagnosticPredicate]. Example: 
		code[Java][assertAll(error(123), warning("some part of the message"))]. ]
	item[code[Java][assertAny(DiagnosticPredicate predicate)]: Asserts that a diagnostic exists which matches the predicate.]
]