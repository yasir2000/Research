section:contentAssist[Content Assist]

The Xtext generator, amongst other things, generates the following two content assist related artifacts:

ul[
	item[An abstract proposal provider class named code[Java][Abstract{MyLang}ProposalProvider] generated 
		into the e[src-gen] folder within the e[ui] project, and]
	item[a concrete subclass in the e[src]-folder of the e[ui] project called 
		code[Java][{MyLang}ProposalProvider]]
]

First we will investigate the generated code[Java][Abstract{MyLang}ProposalProvider] with methods that look like this:

code[Java][
public void complete{TypeName}_{FeatureName}(
  EObject model, Assignment assignment, 
  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
  // clients may override
}

public void complete_{RuleName}(
  EObject model, RuleCall ruleCall, 
  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
  // clients may override
}
]

The snippet above indicates that the generated class contains a e[complete*]-method 
for each assigned feature in the grammar and for each rule. The braces in the snippet are place-holders that should 
give a clue about the naming scheme used to create the various entry points for implementors. The generated 
proposal provider falls back to some default behavior for cross-references and keywords. Furthermore 
it inherits the logic that was introduced in grammars that were mixed into the current language. 

Clients who want to customize the behavior may override the methods from the 
codeRef[org.eclipse.xtext.ui.editor.contentassist.AbstractJavaBasedContentProposalProvider] or introduce new
 methods with a specialized first parameter. The framework inspects the type of the model object and 
dispatches method calls to the most concrete implementation, that can be found.

It is important to know, that for a given offset in a model file, many possible grammar elements exist. 
The framework dispatches to the method declarations for any valid element. That means, that a bunch 
of e[complete*] methods may be called.

To provide a dummy proposal for the code of an code[FowlerExample][event] instance, you may introduce a specialization 
of the generated method and implement it as follows. This will propose code[FowlerExample][ZonkID] for an 
event with the name code[FowlerExample][Zonk].

code[Java][
public void completeEvent_Code(
  Event event, Assignment assignment, 
  ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
  // call implementation of superclass
  super.completeEvent_Code(model, assignment, context, acceptor);

  // compute the plain proposal
  String proposal = event.getName() + "ID";

  // Create and register the completion proposal:
  // The proposal may be null as the createCompletionProposal(..) 
  // methods check for valid prefixes and terminal token conflicts.
  // The acceptor handles null-values gracefully.
  acceptor.accept(createCompletionProposal(proposal, context));
}
]

