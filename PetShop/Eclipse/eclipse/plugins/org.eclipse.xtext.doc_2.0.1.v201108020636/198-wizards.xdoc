section:projectwizard[Project Wizard]

Optionally, Xtext can generate a e[New Project Wizard] for your DSL. Using this wizard a user can create a new 
project with only a few clicks. This project will be configured with the right dependencies and natures. By default 
it contains a sample model file and a sample workflow. Both serve as a scaffold for the user. Furthermore it 
has the Xtext nature and thereby the builder assigned. You enable the generation of the project wizard by adding the 
codeRef[org.eclipse.xtext.ui.generator.projectWizard.SimpleProjectWizardFragment] fragment to the ref:generator_fragment[workflow]:

code[MWE2][
import org.eclipse.xtext.ui.generator.* 

// project wizard fragment
fragment = projectWizard.SimpleProjectWizardFragment {
  generatorProjectName = "${projectName}.generator"
  modelFileExtension = file.extensions
}
]

Here

ul[
	item[the e[generatorProjectName] is used to specify the project that contains the workflows and 
		templates used to generate artifacts from your DSL. The generated project wizard uses this 
		to add a corresponding dependency to the created project.]
	item[and the e[modelFileExtension] specifies the default file extension associated with your DSL. 
		When the user clicks the e[Finish] button the project wizard will look for a file with the 
		given extension in the created project and open a editor.]
]

After running the Xtext generator, the DSL's UI project will contain a new Xpand template 
e[MyDslNewProject.xpt] in the e[src] folder in the package e[\[base-package\].ui.wizard]. 
Note: It may be necessary to manually merge the new entry in the e[plugin.xml_gen] into your 
e[plugin.xml] of the UI project to enable the wizard contribution.

The generated Xpand template will be expanded by the project wizard when the user clicks the e[Finish] button 
and it is responsible for initializing the project with some sample content. When finishing the wizard 
the template will be used to create a sample model file and a simple workflow to run the 
model through the generator project's e[MyDslGenerator.mwe] workflow. However, this is only a pragmatic default.
As the Xpand template is in the e[src] source folder you may of course modify it to generate whatever 
initial content you want for a new project. Just make sure to leave the top-level e[main] definition 
in place, as that is the interface for the project wizard.

e[Note:] To edit the generated Xpand template you should check that the e[JavaBeans meta model contributor] 
is enabled under e[Preferences > Xtend/Xpand]. Further you should also configure the UI project with the 
Xpand/Xtend nature using e[Configure > Add Xpand/Xtend Nature] in the context menu.


section2[Customizing the Project Wizard]

To further customize the creation of the project you can implement your own e[project creator]. 
The default project creator is represented by the generated class e[MyDslProjectCreator] in the
e[src-gen] folder. It is highly extensible. Without any changes it will simply create a new plug-in project 
with the Xtext nature assigned. Afterwards it will execute the e[main] definition of the Xpand template 
as described above.

To add more pages or input fields to the project wizard you should subclass the class 
e[MyDslNewProjectWizard] as appropriate. Don't forget to register the subclass in the UI project's 
e[MyDslUiModule]. You may also want to make additionally entered user data available to the Xpand template. 
In this case you should enhance the e[MyDslProjectInfo] to allow that one to hold the information. This is the 
context object which gets passed to the template when it's executed. Don't forget that your specialized 
e[MyDslNewProjectWizard] has to populate the data fields of your e[MyDslProjectInfo].