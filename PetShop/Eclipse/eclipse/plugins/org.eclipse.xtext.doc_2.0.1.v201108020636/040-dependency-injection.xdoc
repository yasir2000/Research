section:dependencyInjection[Dependency Injection in Xtext with Google Guice]

All Xtext components are assembled by means of Dependency Injection (DI). This means basically that
whenever some code is in need for functionality (or state) from another component, one just declares
the dependency rather then stating how to resolve it, i.e. obtaining that component.

For instance when some code wants to use a scope provider, it just declares a field (or method or 
constructor) and adds the codeRef[com.google.inject.Inject] annotation: 

code[Java][public class MyLanguageLinker extends Linker {

  @Inject
  private IScopeProvider scopeProvider;

}
]

It is not the duty of the client code to care about where the codeRef[org.eclipse.xtext.scoping.IScopeProvider] 
comes from or how it is created. When above's class is instantiated, Guice sees that it requires an instance of 
IScopeProvider and assigns it to the specified field or method parameter. This of course only works,
if the object itself is created by Guice. In Xtext almost every instance is created that way 
and therefore the whole dependency net is controlled and configured by the means of Google Guice.

Guice of course needs to know how to instantiate real objects for declared dependencies. This is done 
in so called codeRef[com.google.inject.Module][Modules]. A codeRef[com.google.inject.Module] defines a set of 
mappings from types to either existing instances, instance providers or concrete classes. Modules are
implemented in Java. Here's an example:

code[Java][
public class MyDslRuntimeModule 
	extends AbstractMyDslRuntimeModule {
	
	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder
			.bind(IScopeProvider.class)
			.to(MyConcreteScopeProvider.class);
	}
}
]

With plain Guice modules one implements a method called configure and gets a codeRef[com.google.inject.Binder] 
passed in. That binder provides a fluent API to define the mentioned mappings. This was just a very 
brief and simplified description. We highly recommend to have a look at 
link[http://code.google.com/p/google-guice/][the website Google Guice] to learn more.  


section2:guicemodules[The Module API]

Xtext comes with a slightly enhanced module API. For your language you get two different modules: One 
for the runtime bundle which is used when executing your language infrastructure outside of Eclipse such 
as on the build server. The other is located in the UI bundle and adds or overrides bindings when Xtext 
is used within an Eclipse environment. 

The enhancement we added to Guice's Module API is that we provide an abstract base class, which 
reflectively looks for certain methods in order to find declared bindings. The most common kind of 
method is :

code[Java][public Class<? extends IScopeProvider> bindIScopeProvider() {
	return MyConcreteScopeProvider.class;
}
]

which would do the same as the code snippet above. It simply declares a binding from 
codeRef[org.eclipse.xtext.scoping.IScopeProvider] to e[MyConcreteScopeProvider]. That binding will make 
Guice instantiate and inject a new instance of e[MyConcreteScopeProvider] whenever a dependency to 
codeRef[org.eclipse.xtext.scoping.IScopeProvider] is declared.

Having a method per binding allows to deactivate individual bindings by overriding the corresponding 
methods and either change the binding by returning a different target type or removing that binding 
completely by returning null.

There are two additional kinds of binding-methods supported. The first one allows to configure a provider. 
A codeRef[com.google.inject.Provider] is an interface with just one method : 

code[Java][
public interface Provider<T> {

  /**
   * Provides an instance of {@code T}. Must never return {@code null}.
   */
  T get();
}
]

This one can be used if you need a hook whenever an instance of a certain type is created. For instance 
if you want to provide lazy access to a singleton or you need to do some computation each time an instance 
is created (i.e. factory). If you want to point to a provider rather than to a concrete class you can use
the following binding method.

code[Java][public Class<? extends Provider<IScopeProvider>> 
	provideIScopeProvider() {
		return MyConcreteScopeProviderFactory.class;
}
]

Note: Please forgive us the overuse of the term e[provider]. The codeRef[org.eclipse.xtext.scoping.IScopeProvider] 
is not a Guice codeRef[com.google.inject.Provider].

That binding tells Guice to instantiate e[MyConcreteScopeProviderFactory] and invoke get() in order to 
obtain an instance of codeRef[org.eclipse.xtext.scoping.IScopeProvider] for clients having declared a dependency
to that type. Both mentioned methods are allowed to return an instance instead of a type. This may be useful 
if some global state should be shared in the application:

code[Java][
public Provider<IScopeProvider> provideIScopeProvider() {
	return new MyConcreteScopeProviderFactory();
}
]

or

code[Java][
public IScopeProvider bindIScopeProvider() {
	return new MyConcreteScopeProvider();
}
]

respectively.

The last binding method provided by Xtext allows to do anything you can do with Guice's binding API, since
it allows you to use the codeRef[com.google.inject.Binder] directly. If your method's name starts with the
name 'configure', has a return type code[Java][void] and accepts one argument of type codeRef[com.google.inject.Binder]:

code[Java][
public void configureIScopeProvider(Binder binder) {
	binder.bind(IScopeProvider.class).to(MyConcreteScopeProvider.class);
} 
]

section2[Obtaining an Injector]

In every application wired up with Guice there is usually one point where you initialize an 
codeRef[com.google.inject.Injector] using the modules declared. That injector is used to create the root 
instance of the whole application. In plain Java environments this is something that's done in the main 
method. It could look like this:

code[Java][
public static void main(String\[\] args) {
	Injector injector = Guice.createInjector(
		new MyDslRuntimeModule());
	MyApplication application = injector.getInstance(
		MyApplication.class);
	application.run();
}
]

In Xtext, you should never instantiate the injector of your language yourself. The sections
ref:runtimeSetup[Runtime Setup] and ref:equinoxSetup[Equinox Setup] explain how to access it in 
different scenarios. 

These are the basic ideas around Guice and the small extension Xtext provides on top. For more information we 
strongly encourage you to read through the documentation on 
link[http://code.google.com/p/google-guice/][the website of Google Guice].
