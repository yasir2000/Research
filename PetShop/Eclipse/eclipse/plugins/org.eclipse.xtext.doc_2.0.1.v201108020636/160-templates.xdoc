section:templates[Template Proposals]

Xtext-based editors automatically support code templates. That means that you get the corresponding 
preference page where users can add and change template proposals. If you want to ship a couple of 
default templates, you have to put a file named e[templates.xml] inside the e[templates] directory of 
the generated UI-plug-in. This file contains templates in a format as described in the 
link[http://help.eclipse.org/ganymede/topic/org.eclipse.cdt.doc.user/tasks/cdt_t_imp_code_temp.htm][Eclipse online help] .

img[images/preferences_templates.png][ ][ ][ ]

By default Xtext registers e[context types] that follow certain patterns. A context type will be created
ol[
	item[for each rule (code[XML][{languageName}.{RuleName}]) and]
	item[for each keyword (code[XML][{languageName}.kw_{keyword}]).]
]
If you don't like these defaults you'll have to subclass 
codeRef[org.eclipse.xtext.ui.editor.templates.XtextTemplateContextTypeRegistry] 
and configure it via ref:guicemodules[Guice]. 

In addition to the standard template proposal extension mechanism, Xtext ships with a predefined set 
of codeRef[org.eclipse.jface.text.templates.TemplateVariableResolver][TemplateVariableResolvers] to resolve special variable types in templates. 
Besides the standard template variables available in 
codeRef[org.eclipse.jface.text.templates.GlobalTemplateVariables] like code[XML][${user}], code[XML][${date}], code[XML][${time}], 
code[XML][${cursor}], etc., these codeRef[org.eclipse.jface.text.templates.TemplateVariableResolver][TemplateVariableResolvers] support the automatic resolving of 
cross references enumeration values. Both resolvers are explained in the 
following sections.

It is best practice to edit the templates in the preferences page, export them into the 
e[templates.xml]-file and put this one into the e[templates] folder of your UI-plug-in. However, these 
templates will not be visible by default. To fix it, you have to manually edit the xml-file and insert 
an code[XML][id] attribute for each template element. Note that the attribute name is case sensitive.

section2[Cross Reference Template Variable Resolver]

Xtext comes with a specific template variable resolver called 
codeRef[org.eclipse.xtext.ui.editor.templates.CrossReferenceTemplateVariableResolver], 
which can be used to pre-populate placeholders for cross-references within a template. The respective
template variable is called e[CrossReference] and its syntax is as follows:

code[XML][${<displayText>:CrossReference(\[<MyPackageName>.\]<MyType>.<myRef>)}]

This small example yields the text e[event => state] and allows selecting any events and states using a drop down:

code[XML][
<template 
	name="transition" 
	description="event transition" 
	id="transition"
  	context="org.xtext.example.SecretCompartments.Transition" 
  	enabled="true">
${event:CrossReference('Transition.event')} =>
  ${state:CrossReference('Transition.state')
</template>
]

img[images/templates_crossref.png][ ][ ][ ]

section2[Enumeration Template Variable Resolver]

The codeRef[org.eclipse.xtext.ui.editor.templates.EnumTemplateVariableResolver] 
resolves a template variable to codeRef[org.eclipse.emf.ecore.EEnumLiteral][EEnumLiterals]
which are assignment-compatible to the enumeration type declared as the first parameter of the the e[Enum]
template variable. 

The syntax is as follows:   

code[Java][${<displayText>:Enum(\[<MyPackage>.\]<EnumType>)]

For example the following template (taken from another example):

code[DomainExample][
<template 
	name="Entity" 
	description="template for an Entity"
	id="entity"
	context="org.eclipse.xtext.example.Domainmodel.Entity"
	enabled="true">
${public:Enum('Visibility')} entity ${Name} {
  ${cursor}
}
</template>
]

yields the text code[DomainExample][public entity Name {}] where the text code[DomainExample][public] is the default value of the code[Java][Visibility].
The editor provides a drop down that is populated with the other literal values as defined in the codeRef[org.eclipse.emf.ecore.EEnum]. 
