section:hyperlinking[Hyperlinking]

The Xtext editor provides hyperlinking support for any tokens corresponding to cross-references in your 
grammar definition. You can either e[CTRL-click] on any of these tokens or hit e[F3] 
while the cursor position is at the token in question and this will take you to the referenced model 
element. As you'd expect this works for references to elements in the same resource as well as for 
references to elements in other resources. In the latter case the referenced resource will first be 
opened using the corresponding editor.

section2:locationProvider[Location Provider]

When navigating a hyperlink, Xtext will also select the text region corresponding to the referenced model 
element. Determining this text region is the responsibility of the 
codeRef[org.eclipse.xtext.resource.ILocationInFileProvider]. The 
codeRef[org.eclipse.xtext.resource.DefaultLocationInFileProvider][default implementation] implements a best 
effort strategy which can be summarized as:

ol[
	item[
		If the model element's codeRef[org.eclipse.emf.ecore.EClass][type] declares a feature e[name] then return the 
		region of the corresponding token(s). As a fallback also check for a feature e[id].
	]
	item[
		If the model element's node model contains any top-level tokens corresponding to invocations
		of the rule e[ID] in the grammar then return a region spanning all those tokens.
	]
	item[
		As a last resort return the region corresponding to the first keyword token of the referenced
		model element.
	]
]

The location service offers different methods to obtain the region of interest for special use cases.
You can either obtain the complete region for an object or only the identifying string which is usually
the name of the instance (see code[Java][getSignificantTextRegion(EObject)]). You can also query for
the text region of a specific codeRef[org.eclipse.emf.ecore.EStructuralFeature] by means of 
code[Java][getFullTextRegion(EObject, EStructuralFeature, int)].

As the default strategy is a best effort it may not always result in the selection you want. If that's 
the case you can ref:guicemodules[override] the codeRef[org.eclipse.xtext.resource.ILocationInFileProvider] binding in 
the UI module as in the following example:

code[Java][
public class MyDslUiModule extends AbstractMyDslUiModule {
  @Override
  public Class<? extends ILocationInFileProvider> 
  		bindILocationInFileProvider() {
    return MyDslLocationInFileProvider.class;
  }
}
]

Often the default strategy only needs some guidance (e.g. selecting the text corresponding to another 
feature than e[name]). In that case you can simply subclass the codeRef[org.eclipse.xtext.resource.DefaultLocationInFileProvider]
and override the methods code[Java][getIdentifierFeature()] or code[Java][useKeyword()] to guide the first and 
last steps of the strategy as described above (see codeRef[org.eclipse.xtext.xtext.XtextLocationInFileProvider] 
for an example).

section2[Customizing Available Hyperlinks]

The hyperlinks are provided by the codeRef[org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkHelper]
which will create links for cross-referenced objects by default. Clients may want to override 
code[Java][createHyperlinksByOffset(XtextResource, int, IHyperlinkAcceptor)] to provide additional links or 
supersede the default implementation. 