section:formatting[Formatting (Pretty Printing)]

A formatter can be implemented via the codeRef[org.eclipse.xtext.formatting.IFormatter] 
service. Technically speaking, a formatter is a ref:tokenstream[Token Stream] which 
inserts/removes/modifies hidden tokens (white space, line-breaks, comments).

The formatter is invoked during the ref:serialization[serialization phase] and when the user triggers 
formatting in the editor (for example, using the CTRL+SHIFT+F shortcut).

Xtext ships with two formatters:
ul[
	item[The codeRef[org.eclipse.xtext.formatting.impl.OneWhitespaceFormatter] simply writes one 
		white space between all tokens.]
	item[The codeRef[org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter] allows advanced 
		configuration using a codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig]. Both are explained
		below.]
]

A declarative formatter can be implemented by subclassing 
codeRef[org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter], as shown in 
the following example:

code[Java][
public class ExampleFormatter extends AbstractDeclarativeFormatter {

  @Override
  protected void configureFormatting(FormattingConfig c) {
    ExampleLanguageGrammarAccess f = getGrammarAccess();
    
    c.setAutoLinewrap(120);
    
    // find common keywords an specify formatting for them
    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
      c.setNoSpace().after(pair.getFirst());
      c.setNoSpace().before(pair.getSecond());
    }
    for (Keyword comma : f.findKeywords(",")) {
      c.setNoSpace().before(comma);
    }

    // formatting for grammar rule Line
    c.setLinewrap(2).after(f.getLineAccess().getSemicolonKeyword_1());
    c.setNoSpace().before(f.getLineAccess().getSemicolonKeyword_1());
    
    // formatting for grammar rule TestIndentation
    c.setIndentationIncrement().after(
        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    c.setIndentationDecrement().before(
        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    c.setLinewrap().after(
        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
    c.setLinewrap().after(
        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
    
    // formatting for grammar rule Param
    c.setNoLinewrap().around(f.getParamAccess().getColonKeyword_1());
    c.setNoSpace().around(f.getParamAccess().getColonKeyword_1());
    
    // formatting for Comments 
    cfg.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
    cfg.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
    cfg.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
  }
}
]

The formatter has to implement the method code[Java][configureFormatting(...)] which declaratively sets up 
a codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig].

The codeRef[org.eclipse.xtext.formatting.impl.FormattingConfig] consist of general 
settings and a set of formatting instructions:


section2[General FormattingConfig Settings]

code[Java][setAutoLinewrap(int)] defines the amount of characters after which a line-break should 
be dynamically inserted between two tokens. The instructions code[Java][setNoLinewrap().???()], 
code[Java][setNoSpace().???()] and code[Java][setSpace(space).???()] suppress this behavior locally. 
The default is 80.

section2[FormattingConfig Instructions]

Per default, the declarative formatter inserts one white space between two 
tokens. Instructions can be used to specify a different behavior. They consist of two parts: e[When] 
to apply the instruction and e[what] to do.

To understand e[when] an instruction is applied think of a stream of tokens whereas each token is 
associated with the corresponding grammar element. The instructions are matched against these grammar 
elements. The following matching criteria exist:
ul[
	item[code[Java][after(element)]: The instruction is applied after the grammar element has been matched. 
		For example, if your grammar uses the keyword code[Xtext][";"] to end lines, this can instruct the formatter 
		to insert a line break after the semicolon.]
	item[code[Java][before(element)]: The instruction is executed before the matched element. For example, if your 
		grammar contains lists which separate their values with the keyword code[Xtext][","], you can instruct the 
		formatter to suppress the white space before the comma.]
	item[code[Java][around(element)]: This is the same as code[Java][before(element)] combined with code[Java][after(element)].]
	item[code[Java][between(left, right)]: This matches if e[left] directly follows e[right] in the document. 
		There may be no other tokens in between e[left] and e[right].]
	item[code[Java][bounds(left, right)]: This is the same as code[Java][after(left)] combined with  code[Java][before(right)].]
	item[code[Java][range(start, end)]: The rule is enabled when e[start] is matched, and disabled when e[end] 
		is matched. Thereby, the rule is active for the complete region which is surrounded by e[start] 
		and e[end].]
]

The term e[tokens] is used slightly different here compared to the parser/lexer. Here, a token is a 
keyword or the string that is matched by a terminal rule, data type rule or cross-reference. In the 
terminology of the lexer a data type rule can match a composition of multiple tokens.

The parameter e[element] can be a grammar's codeRef[org.eclipse.xtext.AbstractElement] or a grammar's 
codeRef[org.eclipse.xtext.AbstractRule]. All grammar 
rules and almost all abstract elements can be matched. This includes rule calls, parser rules, groups 
and alternatives. The semantic of code[Java][before(element)], code[Java][after(element)], etc. for rule calls and parser rules is 
identical to when the parser would "pass" this part of the grammar. The stack of called rules is taken 
into account. The following abstract elements can e[not] have assigned formatting instructions:
ul[
	item[Actions. E.g. code[Xtext][{MyAction}] or code[Xtext][{MyAction.myFeature=current}].]
	item[Grammar elements nested in data type rules. This is due to to the fact that tokens matched 
		by a data type rule are treated as atomic by the serializer. To format these tokens, please 
		implement a ref:valueconverter[ValueConverter]. ]
	item[Grammar elements nested in codeRef[org.eclipse.xtext.CrossReference].]
]

After having explained how rules can be activated, this is what they can do:
ul[
	item[code[Java][setIndentationIncrement()] increments indentation by one unit at this position. Whether 
		one unit consists of one tab-character or spaces is defined by 
		codeRef[org.eclipse.xtext.formatting.IIndentationInformation]. The default implementation 
		consults Eclipse's codeRef[org.eclipse.jface.preference.IPreferenceStore].]
	item[code[Java][setIndentationDecrement()] decrements indentation by one unit.]
	item[code[Java][setLinewrap()]: Inserts a line-wrap at this position.]
	item[code[Java][setLinewrap(int count)]: Inserts e[count] numbers of line-wrap at this position.]
	item[code[Java][setLinewrap(int min, int def, int max)]: If the amount of line-wraps that have been 
		at this position before formatting can be determined (i.e. when a node model is present), 
		then the amount of of line-wraps is adjusted to be within the interval e[min], e[max] 
		and is then reused. In all other cases e[def] line-wraps are inserted. Example: 
		code[Java][setLinewrap(0, 0, 1)] will preserve existing line-wraps, but won't allow more than one 
		line-wrap between two tokens.]
	item[code[Java][setNoLinewrap()]: Suppresses automatic line wrap, which may occur when the line's length 
		exceeds the defined limit.]
	item[code[Java][setSpace(String space)]: Inserts the string e[space] at this position. If you use this 
		to insert something else than white space, tabs or newlines, a small puppy will die somewhere 
		in this world.]
	item[code[Java][setNoSpace()]: Suppresses the white space between tokens at this position. Be aware that 
		between some tokens a white space is required to maintain a valid concrete syntax.]
]


section2[Grammar Element Finders]

Sometimes, if a grammar contains many similar elements for which the same formatting instructions ought 
to apply, it can be tedious to specify them for each grammar element individually. The 
codeRef[org.eclipse.xtext.IGrammarAccess] provides convenience methods for this. The 
find methods are available for the grammar and for each parser rule.

ul[
	item[code[Java][findKeywords(String... keywords)] returns all keywords that equal one of the parameters.]
	item[code[Java][findKeywordPairs(String leftKw, String rightKw)]: returns tuples of keywords from the same 
		grammar rule. Pairs are matched nested and sequentially.  Example: for code[Xtext][Rule: '(' name=ID ('(' foo=ID ')') ')' | '(' bar=ID ')'] 
		code[Java][findKeywordPairs("(", ")")] returns three pairs.]
]